// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a new JWT Token for a user
	// (POST /api/v1/auth/token)
	CreateJWTToken(ctx echo.Context) error
	// A convenience endpoint to check for connection
	// (GET /api/v1/ping)
	Ping(ctx echo.Context) error
	// Returns the sent message, for testing purposes
	// (POST /api/v1/repeat)
	Repeat(ctx echo.Context) error
	// Returns the authenticated user info
	// (GET /api/v1/secure/user)
	GetAuthUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) CreateJWTToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateJWTToken(ctx)
	return err
}

// Ping converts echo context to params.
func (w *ServerInterfaceWrapper) Ping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ping(ctx)
	return err
}

// Repeat converts echo context to params.
func (w *ServerInterfaceWrapper) Repeat(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Repeat(ctx)
	return err
}

// GetAuthUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/auth/token", wrapper.CreateJWTToken)
	router.GET(baseURL+"/api/v1/ping", wrapper.Ping)
	router.POST(baseURL+"/api/v1/repeat", wrapper.Repeat)
	router.GET(baseURL+"/api/v1/secure/user", wrapper.GetAuthUser)

}

type CreateJWTTokenRequestObject struct {
	Body *CreateJWTTokenJSONRequestBody
}

type CreateJWTTokenResponseObject interface {
	VisitCreateJWTTokenResponse(w http.ResponseWriter) error
}

type CreateJWTToken200ResponseHeaders struct {
	SetCookie string
}

type CreateJWTToken200Response struct {
	Headers CreateJWTToken200ResponseHeaders
}

func (response CreateJWTToken200Response) VisitCreateJWTTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)
	return nil
}

type CreateJWTToken400JSONResponse Error

func (response CreateJWTToken400JSONResponse) VisitCreateJWTTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateJWTToken401JSONResponse Error

func (response CreateJWTToken401JSONResponse) VisitCreateJWTTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PingRequestObject struct {
}

type PingResponseObject interface {
	VisitPingResponse(w http.ResponseWriter) error
}

type Ping200JSONResponse struct {
	// Message Pong!
	Message string `json:"message"`
}

func (response Ping200JSONResponse) VisitPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RepeatRequestObject struct {
	Body *RepeatJSONRequestBody
}

type RepeatResponseObject interface {
	VisitRepeatResponse(w http.ResponseWriter) error
}

type Repeat200JSONResponse string

func (response Repeat200JSONResponse) VisitRepeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthUserRequestObject struct {
}

type GetAuthUserResponseObject interface {
	VisitGetAuthUserResponse(w http.ResponseWriter) error
}

type GetAuthUser200JSONResponse struct {
	User struct {
		CreatedAt  string `json:"created_at"`
		Id         uint32 `json:"id"`
		LoggedInAt string `json:"logged_in_at"`
		Name       string `json:"name"`
	} `json:"user"`
}

func (response GetAuthUser200JSONResponse) VisitGetAuthUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Returns a new JWT Token for a user
	// (POST /api/v1/auth/token)
	CreateJWTToken(ctx context.Context, request CreateJWTTokenRequestObject) (CreateJWTTokenResponseObject, error)
	// A convenience endpoint to check for connection
	// (GET /api/v1/ping)
	Ping(ctx context.Context, request PingRequestObject) (PingResponseObject, error)
	// Returns the sent message, for testing purposes
	// (POST /api/v1/repeat)
	Repeat(ctx context.Context, request RepeatRequestObject) (RepeatResponseObject, error)
	// Returns the authenticated user info
	// (GET /api/v1/secure/user)
	GetAuthUser(ctx context.Context, request GetAuthUserRequestObject) (GetAuthUserResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateJWTToken operation middleware
func (sh *strictHandler) CreateJWTToken(ctx echo.Context) error {
	var request CreateJWTTokenRequestObject

	var body CreateJWTTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateJWTToken(ctx.Request().Context(), request.(CreateJWTTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateJWTToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateJWTTokenResponseObject); ok {
		return validResponse.VisitCreateJWTTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Ping operation middleware
func (sh *strictHandler) Ping(ctx echo.Context) error {
	var request PingRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Ping(ctx.Request().Context(), request.(PingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Ping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PingResponseObject); ok {
		return validResponse.VisitPingResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Repeat operation middleware
func (sh *strictHandler) Repeat(ctx echo.Context) error {
	var request RepeatRequestObject

	var body RepeatJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Repeat(ctx.Request().Context(), request.(RepeatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Repeat")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RepeatResponseObject); ok {
		return validResponse.VisitRepeatResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAuthUser operation middleware
func (sh *strictHandler) GetAuthUser(ctx echo.Context) error {
	var request GetAuthUserRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthUser(ctx.Request().Context(), request.(GetAuthUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAuthUserResponseObject); ok {
		return validResponse.VisitGetAuthUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RW32/bNhD+Vzhuj0rlHys2CNhDW7Rrs4cFSYo8BIFxFs8SG4nkyFMcL/D/Phxp1Zbt",
	"NMnWvRQp5bv77rvvfjzI0rbOGjQUZPEgQ1ljC/FP9N56/kNhKL12pK2RhXzPz6K0CgUYJTqj0DcrbSoR",
	"DYLMpPPWoSeN3/LzRnQBF10jWgwBKhTp85w9UY3Jm8wk3kPrGpSFpBo9iiX/E2yLwnk7b7ANYqmpjjYK",
	"CMTKdvzpTitUMpO0cmwcyGtTyXUm76DRChjFbBM6wgSlND9CczaAf2D/FdCDZBizhcZGJXiiQVNRLdou",
	"kJijmCMtEY0YR6omIzbf+LPzL1iSXK8z6fGvTntUsriWfdbHQN4cMw5Ydl7T6oILlxDPETz6Nx3V2/99",
	"sL4FkoU8vbqUWSoze0pftzTVRE6u2bE2Cxvz1xTZ/8iUf0CgzqO4QH+HXpy/v7gUb84+MWD0IRV2/Gr0",
	"KmZqHRpwWhZyGp8y6YDqCDEHp/O7cQ4d1TnZWzT86mygQ6GcI3XeBAHC4FKcXl2KSzYQC+sFsIgYPlcs",
	"0vWJS/HOIxCeXl3GX8pEMQZ6a9WKA5TWEJoYC5xrdBlN8y/Bmm0TREQDKTgIYWm9OsS4X/BfBVnxy0SU",
	"NXgoCX3IogQ4MGgjQDRIhD4Tpmvn6ONHEMFhqaHZmg31j4FmPYbZeDI9pm7mw0CLT2OcMsbXIwGNq8F0",
	"LXpd7sYOB8E3XA9jZvL+xILTJzwSKjQneE8eTgiqyNlGyGzQB8pauP/t9SjJbFf8X7FnW6qPiH5gRb7D",
	"+BCcNSHVaTIaHab/5x8ykzWC4syKB3mBdPLO2luNw5IPrZLUtr8VycMh8xHWzynws+X1k8eFLOSP+XYI",
	"55sJnKdJEN0OIb0FJc6TnmWMOf7/Y3423KnW679RpbHTtS341fPakw36jnfMVvEgK6RjO6G05g6NRlOi",
	"QKOc1YZYp2WN5W30WVpjsIwG+21/lvR4TAv/suM3s/cQ6Zk11Q+DBulf9nUxlHjv8LisDxQ7pPqF9OzS",
	"7tEh0NNDlpdYQEP9Vs6iU25+3suu884ysfvMnyf332vQPkr7BS+h/mDgRb+ERMB8A3sO5e2gLB+xaex/",
	"rcuzxs2zc92bMPUwI07jeRk8LZgXVnVXMPGuwDz272Ptuuue5wMa4qxRxbYX8YLYV8rvSHyZfE6r5Du2",
	"ao90+FrGS0DNkvYPtqWOu3zRH0edNjSdbKnWhrDiAZbJxlYVqpk2j7nql+63dab5JN3suIHLbBfqzVNn",
	"Ykz2JTNkcyXK4np4H17frG8eU8xjJV0nj3wBhuhwGPKD9WL3IJCZ7HyzuS1DkeeNLaGpbaBiPJ1M5fpm",
	"/U8AAAD//7tFnYqGDAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
