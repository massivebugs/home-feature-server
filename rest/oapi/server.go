// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v1/auth)
	CreateUser(ctx echo.Context) error

	// (POST /api/v1/auth/token)
	CreateJWTToken(ctx echo.Context) error

	// (PUT /api/v1/auth/token)
	RefreshJWTToken(ctx echo.Context) error

	// (GET /api/v1/ping)
	Ping(ctx echo.Context) error

	// (POST /api/v1/repeat)
	Repeat(ctx echo.Context) error

	// (DELETE /api/v1/secure/auth/refresh-token)
	DeleteJWTRefreshToken(ctx echo.Context) error

	// (POST /api/v1/secure/auth/refresh-token)
	CreateJWTRefreshToken(ctx echo.Context) error

	// (DELETE /api/v1/secure/auth/token)
	DeleteJWTToken(ctx echo.Context) error

	// (GET /api/v1/secure/cashbunny/accounts)
	GetCashbunnyAccounts(ctx echo.Context) error

	// (POST /api/v1/secure/cashbunny/accounts)
	CreateCashbunnyAccount(ctx echo.Context) error

	// (DELETE /api/v1/secure/cashbunny/accounts/{accountId})
	DeleteCashbunnyAccount(ctx echo.Context, accountId uint32) error

	// (PUT /api/v1/secure/cashbunny/accounts/{accountId})
	UpdateCashbunnyAccount(ctx echo.Context, accountId uint32) error

	// (GET /api/v1/secure/cashbunny/currencies)
	GetCashbunnySupportedCurrencies(ctx echo.Context) error

	// (GET /api/v1/secure/cashbunny/overview)
	GetCashbunnyOverview(ctx echo.Context, params GetCashbunnyOverviewParams) error

	// (GET /api/v1/secure/cashbunny/transactions)
	GetCashbunnyTransactions(ctx echo.Context) error

	// (POST /api/v1/secure/cashbunny/transactions)
	CreateCashbunnyTransaction(ctx echo.Context) error

	// (DELETE /api/v1/secure/cashbunny/transactions/{transactionId})
	DeleteCashbunnyTransaction(ctx echo.Context, transactionId uint32) error

	// (PUT /api/v1/secure/cashbunny/transactions/{transactionId})
	UpdateCashbunnyTransaction(ctx echo.Context, transactionId uint32) error

	// (GET /api/v1/secure/cashbunny/user-preferences)
	GetCashbunnyUserPreference(ctx echo.Context) error

	// (POST /api/v1/secure/cashbunny/user-preferences)
	CreateCashbunnyDefaultUserPreference(ctx echo.Context) error

	// (GET /api/v1/secure/system-preferences)
	GetUserSystemPreference(ctx echo.Context) error

	// (POST /api/v1/secure/system-preferences)
	CreateDefaultUserSystemPreference(ctx echo.Context) error

	// (PUT /api/v1/secure/system-preferences)
	UpdateUserSystemPreference(ctx echo.Context) error

	// (GET /api/v1/secure/user)
	GetUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// CreateJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) CreateJWTToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateJWTToken(ctx)
	return err
}

// RefreshJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) RefreshJWTToken(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RefreshJWTToken(ctx)
	return err
}

// Ping converts echo context to params.
func (w *ServerInterfaceWrapper) Ping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ping(ctx)
	return err
}

// Repeat converts echo context to params.
func (w *ServerInterfaceWrapper) Repeat(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Repeat(ctx)
	return err
}

// DeleteJWTRefreshToken converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJWTRefreshToken(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteJWTRefreshToken(ctx)
	return err
}

// CreateJWTRefreshToken converts echo context to params.
func (w *ServerInterfaceWrapper) CreateJWTRefreshToken(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateJWTRefreshToken(ctx)
	return err
}

// DeleteJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJWTToken(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteJWTToken(ctx)
	return err
}

// GetCashbunnyAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetCashbunnyAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCashbunnyAccounts(ctx)
	return err
}

// CreateCashbunnyAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCashbunnyAccount(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCashbunnyAccount(ctx)
	return err
}

// DeleteCashbunnyAccount converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCashbunnyAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "accountId" -------------
	var accountId uint32

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", ctx.Param("accountId"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCashbunnyAccount(ctx, accountId)
	return err
}

// UpdateCashbunnyAccount converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCashbunnyAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "accountId" -------------
	var accountId uint32

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", ctx.Param("accountId"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCashbunnyAccount(ctx, accountId)
	return err
}

// GetCashbunnySupportedCurrencies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCashbunnySupportedCurrencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCashbunnySupportedCurrencies(ctx)
	return err
}

// GetCashbunnyOverview converts echo context to params.
func (w *ServerInterfaceWrapper) GetCashbunnyOverview(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCashbunnyOverviewParams
	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCashbunnyOverview(ctx, params)
	return err
}

// GetCashbunnyTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetCashbunnyTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCashbunnyTransactions(ctx)
	return err
}

// CreateCashbunnyTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCashbunnyTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCashbunnyTransaction(ctx)
	return err
}

// DeleteCashbunnyTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCashbunnyTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "transactionId" -------------
	var transactionId uint32

	err = runtime.BindStyledParameterWithOptions("simple", "transactionId", ctx.Param("transactionId"), &transactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transactionId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCashbunnyTransaction(ctx, transactionId)
	return err
}

// UpdateCashbunnyTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCashbunnyTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "transactionId" -------------
	var transactionId uint32

	err = runtime.BindStyledParameterWithOptions("simple", "transactionId", ctx.Param("transactionId"), &transactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transactionId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCashbunnyTransaction(ctx, transactionId)
	return err
}

// GetCashbunnyUserPreference converts echo context to params.
func (w *ServerInterfaceWrapper) GetCashbunnyUserPreference(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCashbunnyUserPreference(ctx)
	return err
}

// CreateCashbunnyDefaultUserPreference converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCashbunnyDefaultUserPreference(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCashbunnyDefaultUserPreference(ctx)
	return err
}

// GetUserSystemPreference converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserSystemPreference(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserSystemPreference(ctx)
	return err
}

// CreateDefaultUserSystemPreference converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDefaultUserSystemPreference(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDefaultUserSystemPreference(ctx)
	return err
}

// UpdateUserSystemPreference converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUserSystemPreference(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUserSystemPreference(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/auth", wrapper.CreateUser)
	router.POST(baseURL+"/api/v1/auth/token", wrapper.CreateJWTToken)
	router.PUT(baseURL+"/api/v1/auth/token", wrapper.RefreshJWTToken)
	router.GET(baseURL+"/api/v1/ping", wrapper.Ping)
	router.POST(baseURL+"/api/v1/repeat", wrapper.Repeat)
	router.DELETE(baseURL+"/api/v1/secure/auth/refresh-token", wrapper.DeleteJWTRefreshToken)
	router.POST(baseURL+"/api/v1/secure/auth/refresh-token", wrapper.CreateJWTRefreshToken)
	router.DELETE(baseURL+"/api/v1/secure/auth/token", wrapper.DeleteJWTToken)
	router.GET(baseURL+"/api/v1/secure/cashbunny/accounts", wrapper.GetCashbunnyAccounts)
	router.POST(baseURL+"/api/v1/secure/cashbunny/accounts", wrapper.CreateCashbunnyAccount)
	router.DELETE(baseURL+"/api/v1/secure/cashbunny/accounts/:accountId", wrapper.DeleteCashbunnyAccount)
	router.PUT(baseURL+"/api/v1/secure/cashbunny/accounts/:accountId", wrapper.UpdateCashbunnyAccount)
	router.GET(baseURL+"/api/v1/secure/cashbunny/currencies", wrapper.GetCashbunnySupportedCurrencies)
	router.GET(baseURL+"/api/v1/secure/cashbunny/overview", wrapper.GetCashbunnyOverview)
	router.GET(baseURL+"/api/v1/secure/cashbunny/transactions", wrapper.GetCashbunnyTransactions)
	router.POST(baseURL+"/api/v1/secure/cashbunny/transactions", wrapper.CreateCashbunnyTransaction)
	router.DELETE(baseURL+"/api/v1/secure/cashbunny/transactions/:transactionId", wrapper.DeleteCashbunnyTransaction)
	router.PUT(baseURL+"/api/v1/secure/cashbunny/transactions/:transactionId", wrapper.UpdateCashbunnyTransaction)
	router.GET(baseURL+"/api/v1/secure/cashbunny/user-preferences", wrapper.GetCashbunnyUserPreference)
	router.POST(baseURL+"/api/v1/secure/cashbunny/user-preferences", wrapper.CreateCashbunnyDefaultUserPreference)
	router.GET(baseURL+"/api/v1/secure/system-preferences", wrapper.GetUserSystemPreference)
	router.POST(baseURL+"/api/v1/secure/system-preferences", wrapper.CreateDefaultUserSystemPreference)
	router.PUT(baseURL+"/api/v1/secure/system-preferences", wrapper.UpdateUserSystemPreference)
	router.GET(baseURL+"/api/v1/secure/user", wrapper.GetUser)

}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser202Response struct {
}

func (response CreateUser202Response) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type CreateUser400JSONResponse Error

func (response CreateUser400JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateJWTTokenRequestObject struct {
	Body *CreateJWTTokenJSONRequestBody
}

type CreateJWTTokenResponseObject interface {
	VisitCreateJWTTokenResponse(w http.ResponseWriter) error
}

type CreateJWTToken200ResponseHeaders struct {
	SetCookie string
}

type CreateJWTToken200Response struct {
	Headers CreateJWTToken200ResponseHeaders
}

func (response CreateJWTToken200Response) VisitCreateJWTTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)
	return nil
}

type CreateJWTToken400JSONResponse Error

func (response CreateJWTToken400JSONResponse) VisitCreateJWTTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateJWTToken403JSONResponse Error

func (response CreateJWTToken403JSONResponse) VisitCreateJWTTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RefreshJWTTokenRequestObject struct {
}

type RefreshJWTTokenResponseObject interface {
	VisitRefreshJWTTokenResponse(w http.ResponseWriter) error
}

type RefreshJWTToken200ResponseHeaders struct {
	SetCookie string
}

type RefreshJWTToken200Response struct {
	Headers RefreshJWTToken200ResponseHeaders
}

func (response RefreshJWTToken200Response) VisitRefreshJWTTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)
	return nil
}

type PingRequestObject struct {
}

type PingResponseObject interface {
	VisitPingResponse(w http.ResponseWriter) error
}

type Ping200JSONResponse struct {
	// Message Pong!
	Message string `json:"message"`
}

func (response Ping200JSONResponse) VisitPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RepeatRequestObject struct {
	Body *RepeatJSONRequestBody
}

type RepeatResponseObject interface {
	VisitRepeatResponse(w http.ResponseWriter) error
}

type Repeat200JSONResponse struct {
	// Message The message you sent
	Message string `json:"message"`
}

func (response Repeat200JSONResponse) VisitRepeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteJWTRefreshTokenRequestObject struct {
}

type DeleteJWTRefreshTokenResponseObject interface {
	VisitDeleteJWTRefreshTokenResponse(w http.ResponseWriter) error
}

type DeleteJWTRefreshToken204ResponseHeaders struct {
	SetCookie string
}

type DeleteJWTRefreshToken204Response struct {
	Headers DeleteJWTRefreshToken204ResponseHeaders
}

func (response DeleteJWTRefreshToken204Response) VisitDeleteJWTRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(204)
	return nil
}

type CreateJWTRefreshTokenRequestObject struct {
}

type CreateJWTRefreshTokenResponseObject interface {
	VisitCreateJWTRefreshTokenResponse(w http.ResponseWriter) error
}

type CreateJWTRefreshToken200ResponseHeaders struct {
	SetCookie string
}

type CreateJWTRefreshToken200Response struct {
	Headers CreateJWTRefreshToken200ResponseHeaders
}

func (response CreateJWTRefreshToken200Response) VisitCreateJWTRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)
	return nil
}

type CreateJWTRefreshToken403JSONResponse Error

func (response CreateJWTRefreshToken403JSONResponse) VisitCreateJWTRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteJWTTokenRequestObject struct {
}

type DeleteJWTTokenResponseObject interface {
	VisitDeleteJWTTokenResponse(w http.ResponseWriter) error
}

type DeleteJWTToken204ResponseHeaders struct {
	SetCookie string
}

type DeleteJWTToken204Response struct {
	Headers DeleteJWTToken204ResponseHeaders
}

func (response DeleteJWTToken204Response) VisitDeleteJWTTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(204)
	return nil
}

type GetCashbunnyAccountsRequestObject struct {
}

type GetCashbunnyAccountsResponseObject interface {
	VisitGetCashbunnyAccountsResponse(w http.ResponseWriter) error
}

type GetCashbunnyAccounts200JSONResponse struct {
	Accounts []CashbunnyAccount `json:"accounts"`
}

func (response GetCashbunnyAccounts200JSONResponse) VisitGetCashbunnyAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateCashbunnyAccountRequestObject struct {
	Body *CreateCashbunnyAccountJSONRequestBody
}

type CreateCashbunnyAccountResponseObject interface {
	VisitCreateCashbunnyAccountResponse(w http.ResponseWriter) error
}

type CreateCashbunnyAccount200Response struct {
}

func (response CreateCashbunnyAccount200Response) VisitCreateCashbunnyAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CreateCashbunnyAccount400JSONResponse Error

func (response CreateCashbunnyAccount400JSONResponse) VisitCreateCashbunnyAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCashbunnyAccountRequestObject struct {
	AccountId uint32 `json:"accountId"`
}

type DeleteCashbunnyAccountResponseObject interface {
	VisitDeleteCashbunnyAccountResponse(w http.ResponseWriter) error
}

type DeleteCashbunnyAccount200Response struct {
}

func (response DeleteCashbunnyAccount200Response) VisitDeleteCashbunnyAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateCashbunnyAccountRequestObject struct {
	AccountId uint32 `json:"accountId"`
	Body      *UpdateCashbunnyAccountJSONRequestBody
}

type UpdateCashbunnyAccountResponseObject interface {
	VisitUpdateCashbunnyAccountResponse(w http.ResponseWriter) error
}

type UpdateCashbunnyAccount200Response struct {
}

func (response UpdateCashbunnyAccount200Response) VisitUpdateCashbunnyAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateCashbunnyAccount400JSONResponse Error

func (response UpdateCashbunnyAccount400JSONResponse) VisitUpdateCashbunnyAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCashbunnySupportedCurrenciesRequestObject struct {
}

type GetCashbunnySupportedCurrenciesResponseObject interface {
	VisitGetCashbunnySupportedCurrenciesResponse(w http.ResponseWriter) error
}

type GetCashbunnySupportedCurrencies200JSONResponse struct {
	CurrenciesAndGrapheme map[string]string `json:"currencies_and_grapheme"`
}

func (response GetCashbunnySupportedCurrencies200JSONResponse) VisitGetCashbunnySupportedCurrenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCashbunnyOverviewRequestObject struct {
	Params GetCashbunnyOverviewParams
}

type GetCashbunnyOverviewResponseObject interface {
	VisitGetCashbunnyOverviewResponse(w http.ResponseWriter) error
}

type GetCashbunnyOverview200JSONResponse CashbunnyOverview

func (response GetCashbunnyOverview200JSONResponse) VisitGetCashbunnyOverviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCashbunnyTransactionsRequestObject struct {
}

type GetCashbunnyTransactionsResponseObject interface {
	VisitGetCashbunnyTransactionsResponse(w http.ResponseWriter) error
}

type GetCashbunnyTransactions200JSONResponse struct {
	Transactions []CashbunnyTransaction `json:"transactions"`
}

func (response GetCashbunnyTransactions200JSONResponse) VisitGetCashbunnyTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateCashbunnyTransactionRequestObject struct {
	Body *CreateCashbunnyTransactionJSONRequestBody
}

type CreateCashbunnyTransactionResponseObject interface {
	VisitCreateCashbunnyTransactionResponse(w http.ResponseWriter) error
}

type CreateCashbunnyTransaction200Response struct {
}

func (response CreateCashbunnyTransaction200Response) VisitCreateCashbunnyTransactionResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CreateCashbunnyTransaction400JSONResponse Error

func (response CreateCashbunnyTransaction400JSONResponse) VisitCreateCashbunnyTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCashbunnyTransactionRequestObject struct {
	TransactionId uint32 `json:"transactionId"`
}

type DeleteCashbunnyTransactionResponseObject interface {
	VisitDeleteCashbunnyTransactionResponse(w http.ResponseWriter) error
}

type DeleteCashbunnyTransaction200Response struct {
}

func (response DeleteCashbunnyTransaction200Response) VisitDeleteCashbunnyTransactionResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateCashbunnyTransactionRequestObject struct {
	TransactionId uint32 `json:"transactionId"`
	Body          *UpdateCashbunnyTransactionJSONRequestBody
}

type UpdateCashbunnyTransactionResponseObject interface {
	VisitUpdateCashbunnyTransactionResponse(w http.ResponseWriter) error
}

type UpdateCashbunnyTransaction200Response struct {
}

func (response UpdateCashbunnyTransaction200Response) VisitUpdateCashbunnyTransactionResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateCashbunnyTransaction400JSONResponse Error

func (response UpdateCashbunnyTransaction400JSONResponse) VisitUpdateCashbunnyTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCashbunnyUserPreferenceRequestObject struct {
}

type GetCashbunnyUserPreferenceResponseObject interface {
	VisitGetCashbunnyUserPreferenceResponse(w http.ResponseWriter) error
}

type GetCashbunnyUserPreference200JSONResponse struct {
	// UserPreference Model defining user's Cashbunny preferences such as default currency etc.
	UserPreference CashbunnyUserPreference `json:"user_preference"`
}

func (response GetCashbunnyUserPreference200JSONResponse) VisitGetCashbunnyUserPreferenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCashbunnyUserPreference404Response struct {
}

func (response GetCashbunnyUserPreference404Response) VisitGetCashbunnyUserPreferenceResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CreateCashbunnyDefaultUserPreferenceRequestObject struct {
}

type CreateCashbunnyDefaultUserPreferenceResponseObject interface {
	VisitCreateCashbunnyDefaultUserPreferenceResponse(w http.ResponseWriter) error
}

type CreateCashbunnyDefaultUserPreference200JSONResponse struct {
	// UserPreference Model defining user's Cashbunny preferences such as default currency etc.
	UserPreference CashbunnyUserPreference `json:"user_preference"`
}

func (response CreateCashbunnyDefaultUserPreference200JSONResponse) VisitCreateCashbunnyDefaultUserPreferenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserSystemPreferenceRequestObject struct {
}

type GetUserSystemPreferenceResponseObject interface {
	VisitGetUserSystemPreferenceResponse(w http.ResponseWriter) error
}

type GetUserSystemPreference200JSONResponse struct {
	// UserSystemPreference Model defining user system preferences such as language, time zone etc.
	UserSystemPreference UserSystemPreference `json:"user_system_preference"`
}

func (response GetUserSystemPreference200JSONResponse) VisitGetUserSystemPreferenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserSystemPreference404Response struct {
}

func (response GetUserSystemPreference404Response) VisitGetUserSystemPreferenceResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CreateDefaultUserSystemPreferenceRequestObject struct {
}

type CreateDefaultUserSystemPreferenceResponseObject interface {
	VisitCreateDefaultUserSystemPreferenceResponse(w http.ResponseWriter) error
}

type CreateDefaultUserSystemPreference200JSONResponse struct {
	// UserSystemPreference Model defining user system preferences such as language, time zone etc.
	UserSystemPreference UserSystemPreference `json:"user_system_preference"`
}

func (response CreateDefaultUserSystemPreference200JSONResponse) VisitCreateDefaultUserSystemPreferenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserSystemPreferenceRequestObject struct {
	Body *UpdateUserSystemPreferenceJSONRequestBody
}

type UpdateUserSystemPreferenceResponseObject interface {
	VisitUpdateUserSystemPreferenceResponse(w http.ResponseWriter) error
}

type UpdateUserSystemPreference200JSONResponse struct {
	// UserSystemPreference Model defining user system preferences such as language, time zone etc.
	UserSystemPreference UserSystemPreference `json:"user_system_preference"`
}

func (response UpdateUserSystemPreference200JSONResponse) VisitUpdateUserSystemPreferenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserRequestObject struct {
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse struct {
	User User `json:"user"`
}

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /api/v1/auth)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)

	// (POST /api/v1/auth/token)
	CreateJWTToken(ctx context.Context, request CreateJWTTokenRequestObject) (CreateJWTTokenResponseObject, error)

	// (PUT /api/v1/auth/token)
	RefreshJWTToken(ctx context.Context, request RefreshJWTTokenRequestObject) (RefreshJWTTokenResponseObject, error)

	// (GET /api/v1/ping)
	Ping(ctx context.Context, request PingRequestObject) (PingResponseObject, error)

	// (POST /api/v1/repeat)
	Repeat(ctx context.Context, request RepeatRequestObject) (RepeatResponseObject, error)

	// (DELETE /api/v1/secure/auth/refresh-token)
	DeleteJWTRefreshToken(ctx context.Context, request DeleteJWTRefreshTokenRequestObject) (DeleteJWTRefreshTokenResponseObject, error)

	// (POST /api/v1/secure/auth/refresh-token)
	CreateJWTRefreshToken(ctx context.Context, request CreateJWTRefreshTokenRequestObject) (CreateJWTRefreshTokenResponseObject, error)

	// (DELETE /api/v1/secure/auth/token)
	DeleteJWTToken(ctx context.Context, request DeleteJWTTokenRequestObject) (DeleteJWTTokenResponseObject, error)

	// (GET /api/v1/secure/cashbunny/accounts)
	GetCashbunnyAccounts(ctx context.Context, request GetCashbunnyAccountsRequestObject) (GetCashbunnyAccountsResponseObject, error)

	// (POST /api/v1/secure/cashbunny/accounts)
	CreateCashbunnyAccount(ctx context.Context, request CreateCashbunnyAccountRequestObject) (CreateCashbunnyAccountResponseObject, error)

	// (DELETE /api/v1/secure/cashbunny/accounts/{accountId})
	DeleteCashbunnyAccount(ctx context.Context, request DeleteCashbunnyAccountRequestObject) (DeleteCashbunnyAccountResponseObject, error)

	// (PUT /api/v1/secure/cashbunny/accounts/{accountId})
	UpdateCashbunnyAccount(ctx context.Context, request UpdateCashbunnyAccountRequestObject) (UpdateCashbunnyAccountResponseObject, error)

	// (GET /api/v1/secure/cashbunny/currencies)
	GetCashbunnySupportedCurrencies(ctx context.Context, request GetCashbunnySupportedCurrenciesRequestObject) (GetCashbunnySupportedCurrenciesResponseObject, error)

	// (GET /api/v1/secure/cashbunny/overview)
	GetCashbunnyOverview(ctx context.Context, request GetCashbunnyOverviewRequestObject) (GetCashbunnyOverviewResponseObject, error)

	// (GET /api/v1/secure/cashbunny/transactions)
	GetCashbunnyTransactions(ctx context.Context, request GetCashbunnyTransactionsRequestObject) (GetCashbunnyTransactionsResponseObject, error)

	// (POST /api/v1/secure/cashbunny/transactions)
	CreateCashbunnyTransaction(ctx context.Context, request CreateCashbunnyTransactionRequestObject) (CreateCashbunnyTransactionResponseObject, error)

	// (DELETE /api/v1/secure/cashbunny/transactions/{transactionId})
	DeleteCashbunnyTransaction(ctx context.Context, request DeleteCashbunnyTransactionRequestObject) (DeleteCashbunnyTransactionResponseObject, error)

	// (PUT /api/v1/secure/cashbunny/transactions/{transactionId})
	UpdateCashbunnyTransaction(ctx context.Context, request UpdateCashbunnyTransactionRequestObject) (UpdateCashbunnyTransactionResponseObject, error)

	// (GET /api/v1/secure/cashbunny/user-preferences)
	GetCashbunnyUserPreference(ctx context.Context, request GetCashbunnyUserPreferenceRequestObject) (GetCashbunnyUserPreferenceResponseObject, error)

	// (POST /api/v1/secure/cashbunny/user-preferences)
	CreateCashbunnyDefaultUserPreference(ctx context.Context, request CreateCashbunnyDefaultUserPreferenceRequestObject) (CreateCashbunnyDefaultUserPreferenceResponseObject, error)

	// (GET /api/v1/secure/system-preferences)
	GetUserSystemPreference(ctx context.Context, request GetUserSystemPreferenceRequestObject) (GetUserSystemPreferenceResponseObject, error)

	// (POST /api/v1/secure/system-preferences)
	CreateDefaultUserSystemPreference(ctx context.Context, request CreateDefaultUserSystemPreferenceRequestObject) (CreateDefaultUserSystemPreferenceResponseObject, error)

	// (PUT /api/v1/secure/system-preferences)
	UpdateUserSystemPreference(ctx context.Context, request UpdateUserSystemPreferenceRequestObject) (UpdateUserSystemPreferenceResponseObject, error)

	// (GET /api/v1/secure/user)
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx echo.Context) error {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx.Request().Context(), request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		return validResponse.VisitCreateUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateJWTToken operation middleware
func (sh *strictHandler) CreateJWTToken(ctx echo.Context) error {
	var request CreateJWTTokenRequestObject

	var body CreateJWTTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateJWTToken(ctx.Request().Context(), request.(CreateJWTTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateJWTToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateJWTTokenResponseObject); ok {
		return validResponse.VisitCreateJWTTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RefreshJWTToken operation middleware
func (sh *strictHandler) RefreshJWTToken(ctx echo.Context) error {
	var request RefreshJWTTokenRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshJWTToken(ctx.Request().Context(), request.(RefreshJWTTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshJWTToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RefreshJWTTokenResponseObject); ok {
		return validResponse.VisitRefreshJWTTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Ping operation middleware
func (sh *strictHandler) Ping(ctx echo.Context) error {
	var request PingRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Ping(ctx.Request().Context(), request.(PingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Ping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PingResponseObject); ok {
		return validResponse.VisitPingResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Repeat operation middleware
func (sh *strictHandler) Repeat(ctx echo.Context) error {
	var request RepeatRequestObject

	var body RepeatJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Repeat(ctx.Request().Context(), request.(RepeatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Repeat")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RepeatResponseObject); ok {
		return validResponse.VisitRepeatResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteJWTRefreshToken operation middleware
func (sh *strictHandler) DeleteJWTRefreshToken(ctx echo.Context) error {
	var request DeleteJWTRefreshTokenRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteJWTRefreshToken(ctx.Request().Context(), request.(DeleteJWTRefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteJWTRefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteJWTRefreshTokenResponseObject); ok {
		return validResponse.VisitDeleteJWTRefreshTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateJWTRefreshToken operation middleware
func (sh *strictHandler) CreateJWTRefreshToken(ctx echo.Context) error {
	var request CreateJWTRefreshTokenRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateJWTRefreshToken(ctx.Request().Context(), request.(CreateJWTRefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateJWTRefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateJWTRefreshTokenResponseObject); ok {
		return validResponse.VisitCreateJWTRefreshTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteJWTToken operation middleware
func (sh *strictHandler) DeleteJWTToken(ctx echo.Context) error {
	var request DeleteJWTTokenRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteJWTToken(ctx.Request().Context(), request.(DeleteJWTTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteJWTToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteJWTTokenResponseObject); ok {
		return validResponse.VisitDeleteJWTTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCashbunnyAccounts operation middleware
func (sh *strictHandler) GetCashbunnyAccounts(ctx echo.Context) error {
	var request GetCashbunnyAccountsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCashbunnyAccounts(ctx.Request().Context(), request.(GetCashbunnyAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCashbunnyAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCashbunnyAccountsResponseObject); ok {
		return validResponse.VisitGetCashbunnyAccountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateCashbunnyAccount operation middleware
func (sh *strictHandler) CreateCashbunnyAccount(ctx echo.Context) error {
	var request CreateCashbunnyAccountRequestObject

	var body CreateCashbunnyAccountJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCashbunnyAccount(ctx.Request().Context(), request.(CreateCashbunnyAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCashbunnyAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateCashbunnyAccountResponseObject); ok {
		return validResponse.VisitCreateCashbunnyAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteCashbunnyAccount operation middleware
func (sh *strictHandler) DeleteCashbunnyAccount(ctx echo.Context, accountId uint32) error {
	var request DeleteCashbunnyAccountRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCashbunnyAccount(ctx.Request().Context(), request.(DeleteCashbunnyAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCashbunnyAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCashbunnyAccountResponseObject); ok {
		return validResponse.VisitDeleteCashbunnyAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateCashbunnyAccount operation middleware
func (sh *strictHandler) UpdateCashbunnyAccount(ctx echo.Context, accountId uint32) error {
	var request UpdateCashbunnyAccountRequestObject

	request.AccountId = accountId

	var body UpdateCashbunnyAccountJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCashbunnyAccount(ctx.Request().Context(), request.(UpdateCashbunnyAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCashbunnyAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateCashbunnyAccountResponseObject); ok {
		return validResponse.VisitUpdateCashbunnyAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCashbunnySupportedCurrencies operation middleware
func (sh *strictHandler) GetCashbunnySupportedCurrencies(ctx echo.Context) error {
	var request GetCashbunnySupportedCurrenciesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCashbunnySupportedCurrencies(ctx.Request().Context(), request.(GetCashbunnySupportedCurrenciesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCashbunnySupportedCurrencies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCashbunnySupportedCurrenciesResponseObject); ok {
		return validResponse.VisitGetCashbunnySupportedCurrenciesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCashbunnyOverview operation middleware
func (sh *strictHandler) GetCashbunnyOverview(ctx echo.Context, params GetCashbunnyOverviewParams) error {
	var request GetCashbunnyOverviewRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCashbunnyOverview(ctx.Request().Context(), request.(GetCashbunnyOverviewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCashbunnyOverview")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCashbunnyOverviewResponseObject); ok {
		return validResponse.VisitGetCashbunnyOverviewResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCashbunnyTransactions operation middleware
func (sh *strictHandler) GetCashbunnyTransactions(ctx echo.Context) error {
	var request GetCashbunnyTransactionsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCashbunnyTransactions(ctx.Request().Context(), request.(GetCashbunnyTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCashbunnyTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCashbunnyTransactionsResponseObject); ok {
		return validResponse.VisitGetCashbunnyTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateCashbunnyTransaction operation middleware
func (sh *strictHandler) CreateCashbunnyTransaction(ctx echo.Context) error {
	var request CreateCashbunnyTransactionRequestObject

	var body CreateCashbunnyTransactionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCashbunnyTransaction(ctx.Request().Context(), request.(CreateCashbunnyTransactionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCashbunnyTransaction")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateCashbunnyTransactionResponseObject); ok {
		return validResponse.VisitCreateCashbunnyTransactionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteCashbunnyTransaction operation middleware
func (sh *strictHandler) DeleteCashbunnyTransaction(ctx echo.Context, transactionId uint32) error {
	var request DeleteCashbunnyTransactionRequestObject

	request.TransactionId = transactionId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCashbunnyTransaction(ctx.Request().Context(), request.(DeleteCashbunnyTransactionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCashbunnyTransaction")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCashbunnyTransactionResponseObject); ok {
		return validResponse.VisitDeleteCashbunnyTransactionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateCashbunnyTransaction operation middleware
func (sh *strictHandler) UpdateCashbunnyTransaction(ctx echo.Context, transactionId uint32) error {
	var request UpdateCashbunnyTransactionRequestObject

	request.TransactionId = transactionId

	var body UpdateCashbunnyTransactionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCashbunnyTransaction(ctx.Request().Context(), request.(UpdateCashbunnyTransactionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCashbunnyTransaction")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateCashbunnyTransactionResponseObject); ok {
		return validResponse.VisitUpdateCashbunnyTransactionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCashbunnyUserPreference operation middleware
func (sh *strictHandler) GetCashbunnyUserPreference(ctx echo.Context) error {
	var request GetCashbunnyUserPreferenceRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCashbunnyUserPreference(ctx.Request().Context(), request.(GetCashbunnyUserPreferenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCashbunnyUserPreference")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCashbunnyUserPreferenceResponseObject); ok {
		return validResponse.VisitGetCashbunnyUserPreferenceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateCashbunnyDefaultUserPreference operation middleware
func (sh *strictHandler) CreateCashbunnyDefaultUserPreference(ctx echo.Context) error {
	var request CreateCashbunnyDefaultUserPreferenceRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCashbunnyDefaultUserPreference(ctx.Request().Context(), request.(CreateCashbunnyDefaultUserPreferenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCashbunnyDefaultUserPreference")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateCashbunnyDefaultUserPreferenceResponseObject); ok {
		return validResponse.VisitCreateCashbunnyDefaultUserPreferenceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUserSystemPreference operation middleware
func (sh *strictHandler) GetUserSystemPreference(ctx echo.Context) error {
	var request GetUserSystemPreferenceRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserSystemPreference(ctx.Request().Context(), request.(GetUserSystemPreferenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserSystemPreference")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserSystemPreferenceResponseObject); ok {
		return validResponse.VisitGetUserSystemPreferenceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateDefaultUserSystemPreference operation middleware
func (sh *strictHandler) CreateDefaultUserSystemPreference(ctx echo.Context) error {
	var request CreateDefaultUserSystemPreferenceRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDefaultUserSystemPreference(ctx.Request().Context(), request.(CreateDefaultUserSystemPreferenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDefaultUserSystemPreference")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateDefaultUserSystemPreferenceResponseObject); ok {
		return validResponse.VisitCreateDefaultUserSystemPreferenceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateUserSystemPreference operation middleware
func (sh *strictHandler) UpdateUserSystemPreference(ctx echo.Context) error {
	var request UpdateUserSystemPreferenceRequestObject

	var body UpdateUserSystemPreferenceJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUserSystemPreference(ctx.Request().Context(), request.(UpdateUserSystemPreferenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUserSystemPreference")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateUserSystemPreferenceResponseObject); ok {
		return validResponse.VisitUpdateUserSystemPreferenceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx echo.Context) error {
	var request GetUserRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx.Request().Context(), request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		return validResponse.VisitGetUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
