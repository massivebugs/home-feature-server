// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v1/auth)
	CreateUser(ctx echo.Context) error

	// (POST /api/v1/auth/token)
	CreateJWTToken(ctx echo.Context) error

	// (PUT /api/v1/auth/token)
	RefreshJWTToken(ctx echo.Context) error

	// (GET /api/v1/ping)
	Ping(ctx echo.Context) error

	// (POST /api/v1/repeat)
	Repeat(ctx echo.Context) error

	// (DELETE /api/v1/secure/auth/refresh_token)
	DeleteJWTRefreshToken(ctx echo.Context) error

	// (POST /api/v1/secure/auth/refresh_token)
	CreateJWTRefreshToken(ctx echo.Context) error

	// (DELETE /api/v1/secure/auth/token)
	DeleteJWTToken(ctx echo.Context) error

	// (GET /api/v1/secure/cashbunny/accounts)
	GetCashbunnyAccounts(ctx echo.Context) error

	// (POST /api/v1/secure/cashbunny/accounts)
	CreateCashbunnyAccount(ctx echo.Context) error

	// (DELETE /api/v1/secure/cashbunny/accounts/{accountId})
	DeleteCashbunnyAccount(ctx echo.Context, accountId uint32) error

	// (PUT /api/v1/secure/cashbunny/accounts/{accountId})
	UpdateCashbunnyAccount(ctx echo.Context, accountId uint32) error

	// (GET /api/v1/secure/cashbunny/currencies)
	GetCashbunnySupportedCurrencies(ctx echo.Context) error

	// (GET /api/v1/secure/cashbunny/overview)
	GetCashbunnyOverview(ctx echo.Context, params GetCashbunnyOverviewParams) error

	// (GET /api/v1/secure/cashbunny/user_preferences)
	GetCashbunnyUserPreference(ctx echo.Context) error

	// (POST /api/v1/secure/cashbunny/user_preferences)
	CreateCashbunnyDefaultUserPreference(ctx echo.Context) error

	// (GET /api/v1/secure/system_preferences)
	GetUserSystemPreference(ctx echo.Context) error

	// (POST /api/v1/secure/system_preferences)
	CreateDefaultUserSystemPreference(ctx echo.Context) error

	// (PUT /api/v1/secure/system_preferences)
	UpdateUserSystemPreference(ctx echo.Context) error

	// (GET /api/v1/secure/user)
	GetUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// CreateJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) CreateJWTToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateJWTToken(ctx)
	return err
}

// RefreshJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) RefreshJWTToken(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RefreshJWTToken(ctx)
	return err
}

// Ping converts echo context to params.
func (w *ServerInterfaceWrapper) Ping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ping(ctx)
	return err
}

// Repeat converts echo context to params.
func (w *ServerInterfaceWrapper) Repeat(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Repeat(ctx)
	return err
}

// DeleteJWTRefreshToken converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJWTRefreshToken(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteJWTRefreshToken(ctx)
	return err
}

// CreateJWTRefreshToken converts echo context to params.
func (w *ServerInterfaceWrapper) CreateJWTRefreshToken(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateJWTRefreshToken(ctx)
	return err
}

// DeleteJWTToken converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJWTToken(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteJWTToken(ctx)
	return err
}

// GetCashbunnyAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetCashbunnyAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCashbunnyAccounts(ctx)
	return err
}

// CreateCashbunnyAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCashbunnyAccount(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCashbunnyAccount(ctx)
	return err
}

// DeleteCashbunnyAccount converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCashbunnyAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "accountId" -------------
	var accountId uint32

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", ctx.Param("accountId"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCashbunnyAccount(ctx, accountId)
	return err
}

// UpdateCashbunnyAccount converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCashbunnyAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "accountId" -------------
	var accountId uint32

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", ctx.Param("accountId"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCashbunnyAccount(ctx, accountId)
	return err
}

// GetCashbunnySupportedCurrencies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCashbunnySupportedCurrencies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCashbunnySupportedCurrencies(ctx)
	return err
}

// GetCashbunnyOverview converts echo context to params.
func (w *ServerInterfaceWrapper) GetCashbunnyOverview(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCashbunnyOverviewParams
	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCashbunnyOverview(ctx, params)
	return err
}

// GetCashbunnyUserPreference converts echo context to params.
func (w *ServerInterfaceWrapper) GetCashbunnyUserPreference(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCashbunnyUserPreference(ctx)
	return err
}

// CreateCashbunnyDefaultUserPreference converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCashbunnyDefaultUserPreference(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCashbunnyDefaultUserPreference(ctx)
	return err
}

// GetUserSystemPreference converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserSystemPreference(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserSystemPreference(ctx)
	return err
}

// CreateDefaultUserSystemPreference converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDefaultUserSystemPreference(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDefaultUserSystemPreference(ctx)
	return err
}

// UpdateUserSystemPreference converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUserSystemPreference(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUserSystemPreference(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/auth", wrapper.CreateUser)
	router.POST(baseURL+"/api/v1/auth/token", wrapper.CreateJWTToken)
	router.PUT(baseURL+"/api/v1/auth/token", wrapper.RefreshJWTToken)
	router.GET(baseURL+"/api/v1/ping", wrapper.Ping)
	router.POST(baseURL+"/api/v1/repeat", wrapper.Repeat)
	router.DELETE(baseURL+"/api/v1/secure/auth/refresh_token", wrapper.DeleteJWTRefreshToken)
	router.POST(baseURL+"/api/v1/secure/auth/refresh_token", wrapper.CreateJWTRefreshToken)
	router.DELETE(baseURL+"/api/v1/secure/auth/token", wrapper.DeleteJWTToken)
	router.GET(baseURL+"/api/v1/secure/cashbunny/accounts", wrapper.GetCashbunnyAccounts)
	router.POST(baseURL+"/api/v1/secure/cashbunny/accounts", wrapper.CreateCashbunnyAccount)
	router.DELETE(baseURL+"/api/v1/secure/cashbunny/accounts/:accountId", wrapper.DeleteCashbunnyAccount)
	router.PUT(baseURL+"/api/v1/secure/cashbunny/accounts/:accountId", wrapper.UpdateCashbunnyAccount)
	router.GET(baseURL+"/api/v1/secure/cashbunny/currencies", wrapper.GetCashbunnySupportedCurrencies)
	router.GET(baseURL+"/api/v1/secure/cashbunny/overview", wrapper.GetCashbunnyOverview)
	router.GET(baseURL+"/api/v1/secure/cashbunny/user_preferences", wrapper.GetCashbunnyUserPreference)
	router.POST(baseURL+"/api/v1/secure/cashbunny/user_preferences", wrapper.CreateCashbunnyDefaultUserPreference)
	router.GET(baseURL+"/api/v1/secure/system_preferences", wrapper.GetUserSystemPreference)
	router.POST(baseURL+"/api/v1/secure/system_preferences", wrapper.CreateDefaultUserSystemPreference)
	router.PUT(baseURL+"/api/v1/secure/system_preferences", wrapper.UpdateUserSystemPreference)
	router.GET(baseURL+"/api/v1/secure/user", wrapper.GetUser)

}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser202Response struct {
}

func (response CreateUser202Response) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type CreateUser400JSONResponse Error

func (response CreateUser400JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateJWTTokenRequestObject struct {
	Body *CreateJWTTokenJSONRequestBody
}

type CreateJWTTokenResponseObject interface {
	VisitCreateJWTTokenResponse(w http.ResponseWriter) error
}

type CreateJWTToken200ResponseHeaders struct {
	SetCookie string
}

type CreateJWTToken200Response struct {
	Headers CreateJWTToken200ResponseHeaders
}

func (response CreateJWTToken200Response) VisitCreateJWTTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)
	return nil
}

type CreateJWTToken400JSONResponse Error

func (response CreateJWTToken400JSONResponse) VisitCreateJWTTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateJWTToken403JSONResponse Error

func (response CreateJWTToken403JSONResponse) VisitCreateJWTTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RefreshJWTTokenRequestObject struct {
}

type RefreshJWTTokenResponseObject interface {
	VisitRefreshJWTTokenResponse(w http.ResponseWriter) error
}

type RefreshJWTToken200ResponseHeaders struct {
	SetCookie string
}

type RefreshJWTToken200Response struct {
	Headers RefreshJWTToken200ResponseHeaders
}

func (response RefreshJWTToken200Response) VisitRefreshJWTTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)
	return nil
}

type PingRequestObject struct {
}

type PingResponseObject interface {
	VisitPingResponse(w http.ResponseWriter) error
}

type Ping200JSONResponse struct {
	// Message Pong!
	Message string `json:"message"`
}

func (response Ping200JSONResponse) VisitPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RepeatRequestObject struct {
	Body *RepeatJSONRequestBody
}

type RepeatResponseObject interface {
	VisitRepeatResponse(w http.ResponseWriter) error
}

type Repeat200JSONResponse struct {
	// Message The message you sent
	Message string `json:"message"`
}

func (response Repeat200JSONResponse) VisitRepeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteJWTRefreshTokenRequestObject struct {
}

type DeleteJWTRefreshTokenResponseObject interface {
	VisitDeleteJWTRefreshTokenResponse(w http.ResponseWriter) error
}

type DeleteJWTRefreshToken204ResponseHeaders struct {
	SetCookie string
}

type DeleteJWTRefreshToken204Response struct {
	Headers DeleteJWTRefreshToken204ResponseHeaders
}

func (response DeleteJWTRefreshToken204Response) VisitDeleteJWTRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(204)
	return nil
}

type CreateJWTRefreshTokenRequestObject struct {
}

type CreateJWTRefreshTokenResponseObject interface {
	VisitCreateJWTRefreshTokenResponse(w http.ResponseWriter) error
}

type CreateJWTRefreshToken200ResponseHeaders struct {
	SetCookie string
}

type CreateJWTRefreshToken200Response struct {
	Headers CreateJWTRefreshToken200ResponseHeaders
}

func (response CreateJWTRefreshToken200Response) VisitCreateJWTRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)
	return nil
}

type CreateJWTRefreshToken403JSONResponse Error

func (response CreateJWTRefreshToken403JSONResponse) VisitCreateJWTRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteJWTTokenRequestObject struct {
}

type DeleteJWTTokenResponseObject interface {
	VisitDeleteJWTTokenResponse(w http.ResponseWriter) error
}

type DeleteJWTToken204ResponseHeaders struct {
	SetCookie string
}

type DeleteJWTToken204Response struct {
	Headers DeleteJWTToken204ResponseHeaders
}

func (response DeleteJWTToken204Response) VisitDeleteJWTTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(204)
	return nil
}

type GetCashbunnyAccountsRequestObject struct {
}

type GetCashbunnyAccountsResponseObject interface {
	VisitGetCashbunnyAccountsResponse(w http.ResponseWriter) error
}

type GetCashbunnyAccounts200JSONResponse struct {
	Accounts []CashbunnyAccount `json:"accounts"`
}

func (response GetCashbunnyAccounts200JSONResponse) VisitGetCashbunnyAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateCashbunnyAccountRequestObject struct {
	Body *CreateCashbunnyAccountJSONRequestBody
}

type CreateCashbunnyAccountResponseObject interface {
	VisitCreateCashbunnyAccountResponse(w http.ResponseWriter) error
}

type CreateCashbunnyAccount200Response struct {
}

func (response CreateCashbunnyAccount200Response) VisitCreateCashbunnyAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CreateCashbunnyAccount400JSONResponse Error

func (response CreateCashbunnyAccount400JSONResponse) VisitCreateCashbunnyAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCashbunnyAccountRequestObject struct {
	AccountId uint32 `json:"accountId"`
}

type DeleteCashbunnyAccountResponseObject interface {
	VisitDeleteCashbunnyAccountResponse(w http.ResponseWriter) error
}

type DeleteCashbunnyAccount200Response struct {
}

func (response DeleteCashbunnyAccount200Response) VisitDeleteCashbunnyAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateCashbunnyAccountRequestObject struct {
	AccountId uint32 `json:"accountId"`
	Body      *UpdateCashbunnyAccountJSONRequestBody
}

type UpdateCashbunnyAccountResponseObject interface {
	VisitUpdateCashbunnyAccountResponse(w http.ResponseWriter) error
}

type UpdateCashbunnyAccount200Response struct {
}

func (response UpdateCashbunnyAccount200Response) VisitUpdateCashbunnyAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateCashbunnyAccount400JSONResponse Error

func (response UpdateCashbunnyAccount400JSONResponse) VisitUpdateCashbunnyAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCashbunnySupportedCurrenciesRequestObject struct {
}

type GetCashbunnySupportedCurrenciesResponseObject interface {
	VisitGetCashbunnySupportedCurrenciesResponse(w http.ResponseWriter) error
}

type GetCashbunnySupportedCurrencies200JSONResponse struct {
	CurrenciesAndGrapheme map[string]string `json:"currencies_and_grapheme"`
}

func (response GetCashbunnySupportedCurrencies200JSONResponse) VisitGetCashbunnySupportedCurrenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCashbunnyOverviewRequestObject struct {
	Params GetCashbunnyOverviewParams
}

type GetCashbunnyOverviewResponseObject interface {
	VisitGetCashbunnyOverviewResponse(w http.ResponseWriter) error
}

type GetCashbunnyOverview200JSONResponse CashbunnyOverview

func (response GetCashbunnyOverview200JSONResponse) VisitGetCashbunnyOverviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCashbunnyUserPreferenceRequestObject struct {
}

type GetCashbunnyUserPreferenceResponseObject interface {
	VisitGetCashbunnyUserPreferenceResponse(w http.ResponseWriter) error
}

type GetCashbunnyUserPreference200JSONResponse struct {
	// UserPreference Model defining user's Cashbunny preferences such as default currency etc.
	UserPreference CashbunnyUserPreference `json:"user_preference"`
}

func (response GetCashbunnyUserPreference200JSONResponse) VisitGetCashbunnyUserPreferenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCashbunnyUserPreference404Response struct {
}

func (response GetCashbunnyUserPreference404Response) VisitGetCashbunnyUserPreferenceResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CreateCashbunnyDefaultUserPreferenceRequestObject struct {
}

type CreateCashbunnyDefaultUserPreferenceResponseObject interface {
	VisitCreateCashbunnyDefaultUserPreferenceResponse(w http.ResponseWriter) error
}

type CreateCashbunnyDefaultUserPreference200JSONResponse struct {
	// UserPreference Model defining user's Cashbunny preferences such as default currency etc.
	UserPreference CashbunnyUserPreference `json:"user_preference"`
}

func (response CreateCashbunnyDefaultUserPreference200JSONResponse) VisitCreateCashbunnyDefaultUserPreferenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserSystemPreferenceRequestObject struct {
}

type GetUserSystemPreferenceResponseObject interface {
	VisitGetUserSystemPreferenceResponse(w http.ResponseWriter) error
}

type GetUserSystemPreference200JSONResponse struct {
	// UserSystemPreference Model defining user system preferences such as language, time zone etc.
	UserSystemPreference UserSystemPreference `json:"user_system_preference"`
}

func (response GetUserSystemPreference200JSONResponse) VisitGetUserSystemPreferenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserSystemPreference404Response struct {
}

func (response GetUserSystemPreference404Response) VisitGetUserSystemPreferenceResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CreateDefaultUserSystemPreferenceRequestObject struct {
}

type CreateDefaultUserSystemPreferenceResponseObject interface {
	VisitCreateDefaultUserSystemPreferenceResponse(w http.ResponseWriter) error
}

type CreateDefaultUserSystemPreference200JSONResponse struct {
	// UserSystemPreference Model defining user system preferences such as language, time zone etc.
	UserSystemPreference UserSystemPreference `json:"user_system_preference"`
}

func (response CreateDefaultUserSystemPreference200JSONResponse) VisitCreateDefaultUserSystemPreferenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserSystemPreferenceRequestObject struct {
	Body *UpdateUserSystemPreferenceJSONRequestBody
}

type UpdateUserSystemPreferenceResponseObject interface {
	VisitUpdateUserSystemPreferenceResponse(w http.ResponseWriter) error
}

type UpdateUserSystemPreference200JSONResponse struct {
	// UserSystemPreference Model defining user system preferences such as language, time zone etc.
	UserSystemPreference UserSystemPreference `json:"user_system_preference"`
}

func (response UpdateUserSystemPreference200JSONResponse) VisitUpdateUserSystemPreferenceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserRequestObject struct {
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse struct {
	User User `json:"user"`
}

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /api/v1/auth)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)

	// (POST /api/v1/auth/token)
	CreateJWTToken(ctx context.Context, request CreateJWTTokenRequestObject) (CreateJWTTokenResponseObject, error)

	// (PUT /api/v1/auth/token)
	RefreshJWTToken(ctx context.Context, request RefreshJWTTokenRequestObject) (RefreshJWTTokenResponseObject, error)

	// (GET /api/v1/ping)
	Ping(ctx context.Context, request PingRequestObject) (PingResponseObject, error)

	// (POST /api/v1/repeat)
	Repeat(ctx context.Context, request RepeatRequestObject) (RepeatResponseObject, error)

	// (DELETE /api/v1/secure/auth/refresh_token)
	DeleteJWTRefreshToken(ctx context.Context, request DeleteJWTRefreshTokenRequestObject) (DeleteJWTRefreshTokenResponseObject, error)

	// (POST /api/v1/secure/auth/refresh_token)
	CreateJWTRefreshToken(ctx context.Context, request CreateJWTRefreshTokenRequestObject) (CreateJWTRefreshTokenResponseObject, error)

	// (DELETE /api/v1/secure/auth/token)
	DeleteJWTToken(ctx context.Context, request DeleteJWTTokenRequestObject) (DeleteJWTTokenResponseObject, error)

	// (GET /api/v1/secure/cashbunny/accounts)
	GetCashbunnyAccounts(ctx context.Context, request GetCashbunnyAccountsRequestObject) (GetCashbunnyAccountsResponseObject, error)

	// (POST /api/v1/secure/cashbunny/accounts)
	CreateCashbunnyAccount(ctx context.Context, request CreateCashbunnyAccountRequestObject) (CreateCashbunnyAccountResponseObject, error)

	// (DELETE /api/v1/secure/cashbunny/accounts/{accountId})
	DeleteCashbunnyAccount(ctx context.Context, request DeleteCashbunnyAccountRequestObject) (DeleteCashbunnyAccountResponseObject, error)

	// (PUT /api/v1/secure/cashbunny/accounts/{accountId})
	UpdateCashbunnyAccount(ctx context.Context, request UpdateCashbunnyAccountRequestObject) (UpdateCashbunnyAccountResponseObject, error)

	// (GET /api/v1/secure/cashbunny/currencies)
	GetCashbunnySupportedCurrencies(ctx context.Context, request GetCashbunnySupportedCurrenciesRequestObject) (GetCashbunnySupportedCurrenciesResponseObject, error)

	// (GET /api/v1/secure/cashbunny/overview)
	GetCashbunnyOverview(ctx context.Context, request GetCashbunnyOverviewRequestObject) (GetCashbunnyOverviewResponseObject, error)

	// (GET /api/v1/secure/cashbunny/user_preferences)
	GetCashbunnyUserPreference(ctx context.Context, request GetCashbunnyUserPreferenceRequestObject) (GetCashbunnyUserPreferenceResponseObject, error)

	// (POST /api/v1/secure/cashbunny/user_preferences)
	CreateCashbunnyDefaultUserPreference(ctx context.Context, request CreateCashbunnyDefaultUserPreferenceRequestObject) (CreateCashbunnyDefaultUserPreferenceResponseObject, error)

	// (GET /api/v1/secure/system_preferences)
	GetUserSystemPreference(ctx context.Context, request GetUserSystemPreferenceRequestObject) (GetUserSystemPreferenceResponseObject, error)

	// (POST /api/v1/secure/system_preferences)
	CreateDefaultUserSystemPreference(ctx context.Context, request CreateDefaultUserSystemPreferenceRequestObject) (CreateDefaultUserSystemPreferenceResponseObject, error)

	// (PUT /api/v1/secure/system_preferences)
	UpdateUserSystemPreference(ctx context.Context, request UpdateUserSystemPreferenceRequestObject) (UpdateUserSystemPreferenceResponseObject, error)

	// (GET /api/v1/secure/user)
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx echo.Context) error {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx.Request().Context(), request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		return validResponse.VisitCreateUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateJWTToken operation middleware
func (sh *strictHandler) CreateJWTToken(ctx echo.Context) error {
	var request CreateJWTTokenRequestObject

	var body CreateJWTTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateJWTToken(ctx.Request().Context(), request.(CreateJWTTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateJWTToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateJWTTokenResponseObject); ok {
		return validResponse.VisitCreateJWTTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RefreshJWTToken operation middleware
func (sh *strictHandler) RefreshJWTToken(ctx echo.Context) error {
	var request RefreshJWTTokenRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshJWTToken(ctx.Request().Context(), request.(RefreshJWTTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshJWTToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RefreshJWTTokenResponseObject); ok {
		return validResponse.VisitRefreshJWTTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Ping operation middleware
func (sh *strictHandler) Ping(ctx echo.Context) error {
	var request PingRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Ping(ctx.Request().Context(), request.(PingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Ping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PingResponseObject); ok {
		return validResponse.VisitPingResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Repeat operation middleware
func (sh *strictHandler) Repeat(ctx echo.Context) error {
	var request RepeatRequestObject

	var body RepeatJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Repeat(ctx.Request().Context(), request.(RepeatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Repeat")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RepeatResponseObject); ok {
		return validResponse.VisitRepeatResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteJWTRefreshToken operation middleware
func (sh *strictHandler) DeleteJWTRefreshToken(ctx echo.Context) error {
	var request DeleteJWTRefreshTokenRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteJWTRefreshToken(ctx.Request().Context(), request.(DeleteJWTRefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteJWTRefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteJWTRefreshTokenResponseObject); ok {
		return validResponse.VisitDeleteJWTRefreshTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateJWTRefreshToken operation middleware
func (sh *strictHandler) CreateJWTRefreshToken(ctx echo.Context) error {
	var request CreateJWTRefreshTokenRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateJWTRefreshToken(ctx.Request().Context(), request.(CreateJWTRefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateJWTRefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateJWTRefreshTokenResponseObject); ok {
		return validResponse.VisitCreateJWTRefreshTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteJWTToken operation middleware
func (sh *strictHandler) DeleteJWTToken(ctx echo.Context) error {
	var request DeleteJWTTokenRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteJWTToken(ctx.Request().Context(), request.(DeleteJWTTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteJWTToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteJWTTokenResponseObject); ok {
		return validResponse.VisitDeleteJWTTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCashbunnyAccounts operation middleware
func (sh *strictHandler) GetCashbunnyAccounts(ctx echo.Context) error {
	var request GetCashbunnyAccountsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCashbunnyAccounts(ctx.Request().Context(), request.(GetCashbunnyAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCashbunnyAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCashbunnyAccountsResponseObject); ok {
		return validResponse.VisitGetCashbunnyAccountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateCashbunnyAccount operation middleware
func (sh *strictHandler) CreateCashbunnyAccount(ctx echo.Context) error {
	var request CreateCashbunnyAccountRequestObject

	var body CreateCashbunnyAccountJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCashbunnyAccount(ctx.Request().Context(), request.(CreateCashbunnyAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCashbunnyAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateCashbunnyAccountResponseObject); ok {
		return validResponse.VisitCreateCashbunnyAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteCashbunnyAccount operation middleware
func (sh *strictHandler) DeleteCashbunnyAccount(ctx echo.Context, accountId uint32) error {
	var request DeleteCashbunnyAccountRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCashbunnyAccount(ctx.Request().Context(), request.(DeleteCashbunnyAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCashbunnyAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCashbunnyAccountResponseObject); ok {
		return validResponse.VisitDeleteCashbunnyAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateCashbunnyAccount operation middleware
func (sh *strictHandler) UpdateCashbunnyAccount(ctx echo.Context, accountId uint32) error {
	var request UpdateCashbunnyAccountRequestObject

	request.AccountId = accountId

	var body UpdateCashbunnyAccountJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCashbunnyAccount(ctx.Request().Context(), request.(UpdateCashbunnyAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCashbunnyAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateCashbunnyAccountResponseObject); ok {
		return validResponse.VisitUpdateCashbunnyAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCashbunnySupportedCurrencies operation middleware
func (sh *strictHandler) GetCashbunnySupportedCurrencies(ctx echo.Context) error {
	var request GetCashbunnySupportedCurrenciesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCashbunnySupportedCurrencies(ctx.Request().Context(), request.(GetCashbunnySupportedCurrenciesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCashbunnySupportedCurrencies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCashbunnySupportedCurrenciesResponseObject); ok {
		return validResponse.VisitGetCashbunnySupportedCurrenciesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCashbunnyOverview operation middleware
func (sh *strictHandler) GetCashbunnyOverview(ctx echo.Context, params GetCashbunnyOverviewParams) error {
	var request GetCashbunnyOverviewRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCashbunnyOverview(ctx.Request().Context(), request.(GetCashbunnyOverviewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCashbunnyOverview")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCashbunnyOverviewResponseObject); ok {
		return validResponse.VisitGetCashbunnyOverviewResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCashbunnyUserPreference operation middleware
func (sh *strictHandler) GetCashbunnyUserPreference(ctx echo.Context) error {
	var request GetCashbunnyUserPreferenceRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCashbunnyUserPreference(ctx.Request().Context(), request.(GetCashbunnyUserPreferenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCashbunnyUserPreference")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCashbunnyUserPreferenceResponseObject); ok {
		return validResponse.VisitGetCashbunnyUserPreferenceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateCashbunnyDefaultUserPreference operation middleware
func (sh *strictHandler) CreateCashbunnyDefaultUserPreference(ctx echo.Context) error {
	var request CreateCashbunnyDefaultUserPreferenceRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCashbunnyDefaultUserPreference(ctx.Request().Context(), request.(CreateCashbunnyDefaultUserPreferenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCashbunnyDefaultUserPreference")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateCashbunnyDefaultUserPreferenceResponseObject); ok {
		return validResponse.VisitCreateCashbunnyDefaultUserPreferenceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUserSystemPreference operation middleware
func (sh *strictHandler) GetUserSystemPreference(ctx echo.Context) error {
	var request GetUserSystemPreferenceRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserSystemPreference(ctx.Request().Context(), request.(GetUserSystemPreferenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserSystemPreference")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserSystemPreferenceResponseObject); ok {
		return validResponse.VisitGetUserSystemPreferenceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateDefaultUserSystemPreference operation middleware
func (sh *strictHandler) CreateDefaultUserSystemPreference(ctx echo.Context) error {
	var request CreateDefaultUserSystemPreferenceRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDefaultUserSystemPreference(ctx.Request().Context(), request.(CreateDefaultUserSystemPreferenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDefaultUserSystemPreference")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateDefaultUserSystemPreferenceResponseObject); ok {
		return validResponse.VisitCreateDefaultUserSystemPreferenceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateUserSystemPreference operation middleware
func (sh *strictHandler) UpdateUserSystemPreference(ctx echo.Context) error {
	var request UpdateUserSystemPreferenceRequestObject

	var body UpdateUserSystemPreferenceJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUserSystemPreference(ctx.Request().Context(), request.(UpdateUserSystemPreferenceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUserSystemPreference")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateUserSystemPreferenceResponseObject); ok {
		return validResponse.VisitUpdateUserSystemPreferenceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx echo.Context) error {
	var request GetUserRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx.Request().Context(), request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		return validResponse.VisitGetUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"TqP1zfr/AQAA//+AT1BuHz0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
