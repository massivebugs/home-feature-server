openapi: "3.0.3"

info:
  version: 1.0.0
  title: Home Feature Server REST API
servers:
  - url: "https://localhost:1323"
    description: For oapi-codegen
paths:
  /api/v1/ping:
    get:
      operationId: Ping
      description: A convenience endpoint to check for connection
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Pong! 
                    example: Pong!
                required: [message]
  /api/v1/repeat:
    post:
      operationId: Repeat
      description: Returns the sent message, for testing purposes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: Some message you want to be sent back
                  example: Hello!
              required: [message]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The message you sent
                    example: Hello!
                required: [message]
  /api/v1/auth:
    post:
      operationId: CreateUser
      description: Creates a new user using username, email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: must be a valid email
                  example: testuser@example.com
                  x-oapi-codegen-extra-tags:
                    validate: "email"
                username:
                  type: string
                  description: must be between 3 to 50 alphanumerical characters
                  example: testuser
                  x-oapi-codegen-extra-tags:
                    validate: "alphanum,min=3,max=50"
                password:
                  type: string
                  description: must be between 8 to 72 characters, and contain a letter, number and a special character
                  example: test_password_123!
                  x-oapi-codegen-extra-tags:
                    validate: "_password"
              required: [email, username, password]
      responses:
        202:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v1/auth/token:
    post:
      operationId: CreateJWTToken
      description: Returns a new JWT Token for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: must be alphanumerical characters, with maximum 50 character count
                  example: testuser
                  x-oapi-codegen-extra-tags:
                    validate: "alphanum,max=50"
                password:
                  type: string
                  example: test_password_123
              required: [username, password]
      responses:
        200:
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                description: "Token Set-Cookie header"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        403:
          description: User is disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      operationId: RefreshJWTToken
      description: Refreshes the current JWT Token
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                description: "Token Set-Cookie header"
  /api/v1/secure/auth/token:
    post:
      operationId: CreateJWTRefreshToken
      description: Returns a new JWT Refresh Token for a user
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                description: "Token Set-Cookie header"
        403:
          description: User is disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v1/secure/user:
    get:
      operationId: GetUser
      description: Returns the authenticated user info
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/user'
                required: [user]
  /api/v1/secure/system_preferences:
    get:  
      operationId: GetUserSystemPreference 
      description: Returns user system preference
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [user_system_preference]
                properties:
                  user_system_preference:
                    $ref: '#/components/schemas/userSystemPreference'
        404:
          description: User system preference has not been created yet
    post:  
      operationId: CreateDefaultUserSystemPreference
      description: Create default user preference
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [user_system_preference]
                properties:
                  user_system_preference:
                    $ref: '#/components/schemas/userSystemPreference'
    put:  
      operationId: UpdateUserSystemPreference
      description: Update user preference
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userSystemPreference'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [user_system_preference]
                properties:
                  user_system_preference:
                    $ref: '#/components/schemas/userSystemPreference'
  # /secure/cashbunny/accounts:
  #   get:
  #     tags: 
  #       - v1
  #     operationId: cashbunny/listAccounts
  #     description: Retrieves all accounts
  #     security:
  #       - bearerAuth: []
  #     responses:
  #       200:
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 error:
  #                   $ref: '#/components/schemas/error'
  #                 data:
  #                   example: ""
  #   post:
  #     tags: 
  #       - v1
  #     operationId: cashbunny/createAccount
  #     description: Creates an account
  #     security:
  #       - bearerAuth: []
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               category:
  #                 type: string
  #                 example: savings
  #               name:
  #                 type: string
  #                 example: Test account
  #               description:
  #                 type: string
  #                 example: For savings
  #               balance:
  #                 type: number
  #                 example: 476000
  #                 description: unsigned floating number
  #               currency:
  #                 type: string
  #                 example: JPY
  #               type:
  #                 type: string
  #                 example: credit
  #               order_index:
  #                 type: number
  #                 example: 1
  #                 description: unsigned
  #             required:
  #               - name
  #               - balance
  #               - currency
  #               - type
  #               - order_index
  #     responses:
  #       200:
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 error:
  #                   $ref: '#/components/schemas/error'
  # /secure/cashbunny/transactions:
  #   get:
  #     tags: 
  #       - v1
  #     operationId: cashbunny/listTransactions
  #     description: Retrieves all transactions
  #     security:
  #       - bearerAuth: []
  #     responses:
  #       200:
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 error:
  #                   $ref: '#/components/schemas/error'
  #                 data:
  #                   example: ""
  #   post:
  #     tags: 
  #       - v1
  #     operationId: cashbunny/createTransaction
  #     description: Creates an transaction
  #     security:
  #       - bearerAuth: []
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               description:
  #                 type: string
  #                 example: Paid for groceries at Foo store
  #               amount:
  #                 type: number
  #                 example: 5140
  #                 description: unsigned floating number
  #               currency:
  #                 type: string
  #                 example: JPY
  #               source_account_id:
  #                 type: number
  #                 example: 1
  #                 description: Money from
  #               destination_account_id:
  #                 type: number
  #                 example: 2
  #                 description: Money to
  #               transacted_at:
  #                 type: string
  #                 example: "2006-01-02 15:04:05"
  #                 description: Datetime of transaction
  #             required:
  #               - description
  #               - amount
  #               - currency
  #               - source_account_id
  #               - destination_account_id
  #               - transacted_at
  #     responses:
  #       200:
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 error:
  #                   $ref: '#/components/schemas/error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    error:
      required: [message, validation_messages]
      type: object
      description: Error code and underlying errors
      properties:
        message:
          type: string
          example: "there were some problems with the data you provided"
          description: "A useful message describing the error"
        validation_messages:
          type: object
          additionalProperties:
            type: string
          example: {"some_field": "the length must be between 1 and 20"}
    user:
      type: object
      properties:
        id:
          type: integer
          format: uint32
        name:
          type: string
        logged_in_at:
          type: string
        created_at:
          type: string
      required: [id, name, logged_in_at, created_at]
    userSystemPreference:
      type: object
      description: Model defining user system preferences such as language, time zone etc.
      properties:
        language:
          type: string
          example: "ja-JP"
          nullable: true
