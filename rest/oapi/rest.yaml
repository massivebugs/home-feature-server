openapi: "3.0.3"

info:
  version: 1.0.0
  title: Home Feature Server REST API
servers:
  - url: "https://localhost:1323"
    description: For oapi-codegen
paths:
  /api/v1/ping:
    get:
      operationId: Ping
      description: A convenience endpoint to check for connection
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Pong! 
                    example: Pong!
                required: [message]
  /api/v1/repeat:
    post:
      operationId: Repeat
      description: Returns the sent message, for testing purposes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: Some message you want to be sent back
                  example: Hello!
              required: [message]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The message you sent
                    example: Hello!
                required: [message]
  /api/v1/auth:
    post:
      operationId: CreateUser
      description: Creates a new user using username, email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: must be a valid email
                  example: testuser@example.com
                  x-oapi-codegen-extra-tags:
                    validate: "email"
                username:
                  type: string
                  description: must be between 3 to 50 alphanumerical characters
                  example: testuser
                  x-oapi-codegen-extra-tags:
                    validate: "alphanum,min=3,max=50"
                password:
                  type: string
                  description: must be between 8 to 72 characters, and contain a letter, number and a special character
                  example: test_password_123!
                  x-oapi-codegen-extra-tags:
                    validate: "_password"
              required: [email, username, password]
      responses:
        202:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v1/auth/token:
    post:
      operationId: CreateJWTToken
      description: Returns a new JWT Token for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: must be alphanumerical characters, with maximum 50 character count
                  example: testuser
                  x-oapi-codegen-extra-tags:
                    validate: "alphanum,max=50"
                password:
                  type: string
                  example: test_password_123
              required: [username, password]
      responses:
        200:
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                description: "Token Set-Cookie header"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        403:
          description: User is disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      operationId: RefreshJWTToken
      description: Refreshes the current JWT Token
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                description: "Token Set-Cookie header"
  /api/v1/secure/auth/token:
    delete:
      operationId: DeleteJWTToken
      description: Makes the client delete their stored cookie by setting expires to a past date
      security:
        - bearerAuth: []
      responses:
        204:
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                description: "Token Set-Cookie header"
  /api/v1/secure/auth/refresh_token:
    post:
      operationId: CreateJWTRefreshToken
      description: Returns a new JWT Refresh Token for a user
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                description: "Token Set-Cookie header"
        403:
          description: User is disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      operationId: DeleteJWTRefreshToken
      description: Makes the client delete their stored cookie by setting expires to a past date
      security:
        - bearerAuth: []
      responses:
        204:
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                description: "Token Set-Cookie header"
  /api/v1/secure/user:
    get:
      operationId: GetUser
      description: Returns the authenticated user info
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/user'
                required: [user]
  /api/v1/secure/system_preferences:
    get:  
      operationId: GetUserSystemPreference 
      description: Returns user system preference
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [user_system_preference]
                properties:
                  user_system_preference:
                    $ref: '#/components/schemas/userSystemPreference'
        404:
          description: User system preference has not been created yet
    post:  
      operationId: CreateDefaultUserSystemPreference
      description: Create default user preference
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [user_system_preference]
                properties:
                  user_system_preference:
                    $ref: '#/components/schemas/userSystemPreference'
    put:  
      operationId: UpdateUserSystemPreference
      description: Update user preference
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userSystemPreference'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [user_system_preference]
                properties:
                  user_system_preference:
                    $ref: '#/components/schemas/userSystemPreference'
  /api/v1/secure/cashbunny/user_preferences:
    get:
      operationId: GetCashbunnyUserPreference
      description: Returns user preferences for Cashbunny
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [user_preference]
                properties:
                  user_preference:
                    $ref: '#/components/schemas/cashbunnyUserPreference'
        404:
          description: User preference has not been created yet
    post:
      operationId: CreateCashbunnyDefaultUserPreference
      description: Create default Cashbunny user preference
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [user_preference]
                properties:
                  user_preference:
                    $ref: '#/components/schemas/cashbunnyUserPreference'
  /api/v1/secure/cashbunny/currencies:
    get:
      operationId: GetCashbunnySupportedCurrencies
      description: Returns Cashbunny's supported currencies
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [currencies_and_grapheme]
                properties:
                  currencies_and_grapheme:
                    type: object
                    additionalProperties:
                      type: string

  /api/v1/secure/cashbunny/overview:
    get:
      operationId: GetCashbunnyOverview
      description: Returns Cashbunny overview of the user's budget planner
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: from
          schema:
            type: integer
            format: int64
          description: Overview timeframe's start date
        - in: query
          name: to
          schema:
            type: integer
            format: int64
          description: Overview timeframe's end date
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cashbunnyOverview'
  /api/v1/secure/cashbunny/accounts:
    get:
      operationId: GetCashbunnyAccounts
      description: Retrieves all Cashbunny accounts the user has
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [accounts]
                properties:
                  accounts:
                    type: array
                    items:
                      $ref: '#/components/schemas/cashbunnyAccount'
    post:
      operationId: CreateCashbunnyAccount
      description: Records an account in cashbunny
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, category, description, currency]
              properties:
                name:
                  type: string
                  description: Name of the account to save
                  x-oapi-codegen-extra-tags:
                    validate: "required,max=100"
                category:
                  type: string
                  description: Category of the account.
                  x-oapi-codegen-extra-tags:
                    validate: "required,oneof=assets liabilities revenues expenses"
                description:
                  type: string
                  x-oapi-codegen-extra-tags:
                    validate: "required,max=200"
                currency:
                  type: string
                  example: JPY
                  x-oapi-codegen-extra-tags:
                    validate: "required,_cashbunny_currency"
                order_index:
                  type: integer
                  format: uint32
                  description: Order of the record to be placed in
                  nullable: true
      responses:
        200:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v1/secure/cashbunny/accounts/{accountId}:
    put:
      operationId: UpdateCashbunnyAccount
      description: Updates an account in cashbunny
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: accountId
          schema:
            type: integer
            format: uint32
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, description, order_index]
              properties:
                name:
                  type: string
                  description: Name of the account to save
                  x-oapi-codegen-extra-tags:
                    validate: "required,max=100"
                description:
                  type: string
                  x-oapi-codegen-extra-tags:
                    validate: "required,max=200"
                order_index:
                  type: integer
                  format: uint32
                  description: Order of the record to be placed in
                  x-oapi-codegen-extra-tags:
                    validate: "required,number"
      responses:
        200:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      operationId: DeleteCashbunnyAccount
      description: Deletes a single cashbunny account
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: accountId
          schema:
            type: integer
            format: uint32
          required: true
      responses:
        200:
          description: OK
  # /secure/cashbunny/transactions:
  #   get:
  #     tags: 
  #       - v1
  #     operationId: cashbunny/listTransactions
  #     description: Retrieves all transactions
  #     security:
  #       - bearerAuth: []
  #     responses:
  #       200:
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 error:
  #                   $ref: '#/components/schemas/error'
  #                 data:
  #                   example: ""
  #   post:
  #     tags: 
  #       - v1
  #     operationId: cashbunny/createTransaction
  #     description: Creates an transaction
  #     security:
  #       - bearerAuth: []
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               description:
  #                 type: string
  #                 example: Paid for groceries at Foo store
  #               amount:
  #                 type: number
  #                 example: 5140
  #                 description: unsigned floating number
  #               currency:
  #                 type: string
  #                 example: JPY
  #               source_account_id:
  #                 type: number
  #                 example: 1
  #                 description: Money from
  #               destination_account_id:
  #                 type: number
  #                 example: 2
  #                 description: Money to
  #               transacted_at:
  #                 type: string
  #                 example: "2006-01-02 15:04:05"
  #                 description: Datetime of transaction
  #             required:
  #               - description
  #               - amount
  #               - currency
  #               - source_account_id
  #               - destination_account_id
  #               - transacted_at
  #     responses:
  #       200:
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 error:
  #                   $ref: '#/components/schemas/error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    error:
      required: [message, validation_messages]
      type: object
      description: Error code and underlying errors
      properties:
        message:
          type: string
          example: "there were some problems with the data you provided"
          description: "A useful message describing the error"
        validation_messages:
          type: object
          additionalProperties:
            type: string
          example: {"some_field": "the length must be between 1 and 20"}
    user:
      type: object
      required: [id, name, logged_in_at, created_at]
      properties:
        id:
          type: integer
          format: uint32
        name:
          type: string
        logged_in_at:
          type: string
        created_at:
          type: string
    userSystemPreference:
      type: object
      description: Model defining user system preferences such as language, time zone etc.
      properties:
        language:
          type: string
          example: "ja-JP"
          nullable: true
    cashbunnyUserPreference:
      type: object
      description: Model defining user's Cashbunny preferences such as default currency etc.
      required: [user_currencies]
      properties:
        user_currencies:
          type: array
          items:
            type: string
    cashbunnyOverview:
      type: object
      description: Overview of user's budget keeping.
      required: [from, to, net_worth, profit_loss_summary, asset_accounts, liability_accounts, transactions, transactions_from_scheduled]
      properties:
        from:
          type: string
          description: Overview target start time
        to:
          type: string
          description: Overview target end time
        net_worth:
          type: object
          description: Net worth per currency
          additionalProperties:
            type: string
        profit_loss_summary:
          type: object
          description: User's profit/loss summary within the timeframe
          additionalProperties:
            type: object
            required: [revenue, expense, profit]
            properties:
              revenue:
                type: string
              expense: 
                type: string
              profit:
                type: string
        asset_accounts:
          type: array
          items:
            $ref: '#/components/schemas/cashbunnyAccount'
        liability_accounts:
          type: array
          items:
            $ref: '#/components/schemas/cashbunnyAccount'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/cashbunnyTransaction'
        transactions_from_scheduled:
          type: array
          items:
            $ref: '#/components/schemas/cashbunnyTransaction'
    cashbunnyAccount:
      type: object
      description: Model representing any financial account such as bank account, credit card, wallet etc.
      required: [id, category, name, description, currency, type, order_index, created_at, updated_at]
      properties:
        id:
          type: integer
          format: uint32
        category:
          type: string
        name:
          type: string
        description:
          type: string
        currency:
          type: string
        type:
          type: string
        order_index:
          type: integer
          format: uint32
        created_at:
          type: string
        updated_at:
          type: string
        amount:
          type: number
          format: double
          nullable: true
        amount_display:
          type: string
          nullable: true
    cashbunnyTransaction:
      type: object
      description: Model representing a single atomic financial transaction between accounts
      required: [id, description, amount, currency, amount_display, transacted_at, created_at, updated_at, source_account_id, source_account_name, destination_account_id, destination_account_name, scheduled_transaction]
      properties:
        id:
          type: integer
          format: uint32
        description:
          type: string
        amount:
          type: number
          format: double
        currency:
          type: string
        amount_display:
          type: string
        transacted_at:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        source_account_id:
          type: integer
          format: uint32
        source_account_name:
          type: string
        destination_account_id:
          type: integer
          format: uint32
        destination_account_name:
          type: string
        scheduled_transaction:
          $ref: '#/components/schemas/cashbunnyScheduledTransaction'
    cashbunnyScheduledTransaction:
      type: object
      description: Model representing a scheduled transaction
      required: [id, description, amount, currency, amount_display, created_at, updated_at, recurrence_rule, source_account_id, source_account_name, destination_account_id, destination_account_name]
      properties:
        id:
          type: integer
          format: uint32
        description:
          type: string
        amount:
          type: number
          format: double
        currency:
          type: string
        amount_display:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        recurrence_rule:
          $ref: '#/components/schemas/cashbunnyRecurrenceRule'
        source_account_id:
          type: integer
          format: uint32
        source_account_name:
          type: string
        destination_account_id:
          type: integer
          format: uint32
        destination_account_name:
          type: string
    cashbunnyRecurrenceRule:
      type: object
      description: Model representing iCalendar recurrence rule (https://datatracker.ietf.org/doc/html/rfc5545)
      required: [freq, dtstart, count, interval, until]
      properties:
        freq:
          type: string
        dtstart:
          type: string
        count:
          type: integer
        interval:
          type: integer
        until:
          type: string