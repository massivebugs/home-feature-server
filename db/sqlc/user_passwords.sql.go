// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_passwords.sql

package queries

import (
	"context"
	"database/sql"
)

const createUserPassword = `-- name: CreateUserPassword :execresult
INSERT INTO
  user_passwords (user_id, password_hash)
VALUES
  (?, ?)
`

type CreateUserPasswordParams struct {
	UserID       uint32 `db:"user_id"`
	PasswordHash string `db:"password_hash"`
}

func (q *Queries) CreateUserPassword(ctx context.Context, arg CreateUserPasswordParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUserPassword, arg.UserID, arg.PasswordHash)
}

const getUserPasswordByUserID = `-- name: GetUserPasswordByUserID :one
SELECT
  id, user_id, password_hash, created_at, updated_at, deleted_at
FROM
  user_passwords
WHERE
  user_id = ?
LIMIT
  1
`

func (q *Queries) GetUserPasswordByUserID(ctx context.Context, userID uint32) (*UserPassword, error) {
	row := q.db.QueryRowContext(ctx, getUserPasswordByUserID, userID)
	var i UserPassword
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE user_passwords
SET
  password_hash = ?
WHERE
  id = ?
`

type UpdateUserPasswordParams struct {
	PasswordHash string `db:"password_hash"`
	ID           uint32 `db:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.PasswordHash, arg.ID)
	return err
}
