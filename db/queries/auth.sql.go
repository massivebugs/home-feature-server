// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: auth.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO
  users (name, email)
VALUES
  (?, ?)
`

type CreateUserParams struct {
	Name  string
	Email string
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, arg CreateUserParams) (sql.Result, error) {
	return db.ExecContext(ctx, createUser, arg.Name, arg.Email)
}

const createUserPassword = `-- name: CreateUserPassword :execresult
INSERT INTO
  user_passwords (user_id, password_hash)
VALUES
  (?, ?)
`

type CreateUserPasswordParams struct {
	UserID       uint32
	PasswordHash string
}

func (q *Queries) CreateUserPassword(ctx context.Context, db DBTX, arg CreateUserPasswordParams) (sql.Result, error) {
	return db.ExecContext(ctx, createUserPassword, arg.UserID, arg.PasswordHash)
}

const createUserRefreshToken = `-- name: CreateUserRefreshToken :execresult
INSERT INTO
  user_refresh_tokens (user_id, value, expires_at)
VALUES
  (?, ?, ?)
`

type CreateUserRefreshTokenParams struct {
	UserID    uint32
	Value     string
	ExpiresAt time.Time
}

func (q *Queries) CreateUserRefreshToken(ctx context.Context, db DBTX, arg CreateUserRefreshTokenParams) (sql.Result, error) {
	return db.ExecContext(ctx, createUserRefreshToken, arg.UserID, arg.Value, arg.ExpiresAt)
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET
  deleted_at = CURRENT_TIMESTAMP()
WHERE
  id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, db DBTX, id uint32) error {
	_, err := db.ExecContext(ctx, deleteUser, id)
	return err
}

const deleteUserRefreshTokenByValue = `-- name: DeleteUserRefreshTokenByValue :execresult
DELETE 
  FROM user_refresh_tokens
  WHERE
    user_id = ?
    AND value = ?
`

type DeleteUserRefreshTokenByValueParams struct {
	UserID uint32
	Value  string
}

func (q *Queries) DeleteUserRefreshTokenByValue(ctx context.Context, db DBTX, arg DeleteUserRefreshTokenByValueParams) (sql.Result, error) {
	return db.ExecContext(ctx, deleteUserRefreshTokenByValue, arg.UserID, arg.Value)
}

const getUser = `-- name: GetUser :one
SELECT
  id, name, email, disabled_at, created_at, updated_at, deleted_at
FROM
  users
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetUser(ctx context.Context, db DBTX, id uint32) (*User, error) {
	row := db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.DisabledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT
  id, name, email, disabled_at, created_at, updated_at, deleted_at
FROM
  users
WHERE
  name = ?
LIMIT
  1
`

func (q *Queries) GetUserByName(ctx context.Context, db DBTX, name string) (*User, error) {
	row := db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.DisabledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getUserPasswordByUserID = `-- name: GetUserPasswordByUserID :one
SELECT
  id, user_id, password_hash, created_at, updated_at, deleted_at
FROM
  user_passwords
WHERE
  user_id = ?
LIMIT
  1
`

func (q *Queries) GetUserPasswordByUserID(ctx context.Context, db DBTX, userID uint32) (*UserPassword, error) {
	row := db.QueryRowContext(ctx, getUserPasswordByUserID, userID)
	var i UserPassword
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getUserRefreshTokenExistsByValue = `-- name: GetUserRefreshTokenExistsByValue :one
SELECT
  EXISTS (
    SELECT
      id, user_id, value, expires_at, created_at, updated_at
    FROM
      user_refresh_tokens
    WHERE
      user_id = ?
      AND value = ?
    LIMIT
      1
  )
`

type GetUserRefreshTokenExistsByValueParams struct {
	UserID uint32
	Value  string
}

func (q *Queries) GetUserRefreshTokenExistsByValue(ctx context.Context, db DBTX, arg GetUserRefreshTokenExistsByValueParams) (bool, error) {
	row := db.QueryRowContext(ctx, getUserRefreshTokenExistsByValue, arg.UserID, arg.Value)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getUsernameOrEmailExists = `-- name: GetUsernameOrEmailExists :one
SELECT
  EXISTS (
    SELECT
      id, name, email, disabled_at, created_at, updated_at, deleted_at
    FROM
      users
    WHERE
      name = ? 
      OR email = ?
  )
`

type GetUsernameOrEmailExistsParams struct {
	Name  string
	Email string
}

func (q *Queries) GetUsernameOrEmailExists(ctx context.Context, db DBTX, arg GetUsernameOrEmailExistsParams) (bool, error) {
	row := db.QueryRowContext(ctx, getUsernameOrEmailExists, arg.Name, arg.Email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  name = ?,
  email = ?
WHERE
  id = ?
`

type UpdateUserParams struct {
	Name  string
	Email string
	ID    uint32
}

func (q *Queries) UpdateUser(ctx context.Context, db DBTX, arg UpdateUserParams) error {
	_, err := db.ExecContext(ctx, updateUser, arg.Name, arg.Email, arg.ID)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE user_passwords
SET
  password_hash = ?
WHERE
  id = ?
`

type UpdateUserPasswordParams struct {
	PasswordHash string
	ID           uint32
}

func (q *Queries) UpdateUserPassword(ctx context.Context, db DBTX, arg UpdateUserPasswordParams) error {
	_, err := db.ExecContext(ctx, updateUserPassword, arg.PasswordHash, arg.ID)
	return err
}
