// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package queries

import (
	"context"
	"database/sql"
)

type Querier interface {
	CreateAccount(ctx context.Context, db DBTX, arg CreateAccountParams) (sql.Result, error)
	CreateRecurrenceRule(ctx context.Context, db DBTX, arg CreateRecurrenceRuleParams) (sql.Result, error)
	CreateScheduledTransaction(ctx context.Context, db DBTX, arg CreateScheduledTransactionParams) (sql.Result, error)
	CreateScheduledTransactionRecurrenceRuleRelationship(ctx context.Context, db DBTX, arg CreateScheduledTransactionRecurrenceRuleRelationshipParams) (sql.Result, error)
	CreateTransaction(ctx context.Context, db DBTX, arg CreateTransactionParams) (sql.Result, error)
	CreateTransactionCategory(ctx context.Context, db DBTX, arg CreateTransactionCategoryParams) (sql.Result, error)
	CreateTransactionCategoryAllocation(ctx context.Context, db DBTX, arg CreateTransactionCategoryAllocationParams) (sql.Result, error)
	CreateUser(ctx context.Context, db DBTX, arg CreateUserParams) (sql.Result, error)
	CreateUserCurrency(ctx context.Context, db DBTX, arg CreateUserCurrencyParams) (sql.Result, error)
	CreateUserPassword(ctx context.Context, db DBTX, arg CreateUserPasswordParams) (sql.Result, error)
	CreateUserPreferences(ctx context.Context, db DBTX, userID uint32) (sql.Result, error)
	CreateUserRefreshToken(ctx context.Context, db DBTX, arg CreateUserRefreshTokenParams) (sql.Result, error)
	CreateUserSystemPreference(ctx context.Context, db DBTX, arg CreateUserSystemPreferenceParams) (sql.Result, error)
	DeleteAccount(ctx context.Context, db DBTX, arg DeleteAccountParams) error
	DeleteTransaction(ctx context.Context, db DBTX, arg DeleteTransactionParams) error
	DeleteTransactionsByAccountID(ctx context.Context, db DBTX, arg DeleteTransactionsByAccountIDParams) error
	DeleteUser(ctx context.Context, db DBTX, id uint32) error
	GetAccountByID(ctx context.Context, db DBTX, arg GetAccountByIDParams) (*CashbunnyAccount, error)
	GetTransactionByID(ctx context.Context, db DBTX, arg GetTransactionByIDParams) (*CashbunnyTransaction, error)
	GetUser(ctx context.Context, db DBTX, id uint32) (*User, error)
	GetUserByName(ctx context.Context, db DBTX, name string) (*User, error)
	GetUserPasswordByUserID(ctx context.Context, db DBTX, userID uint32) (*UserPassword, error)
	GetUserPreferenceByUserID(ctx context.Context, db DBTX, userID uint32) (*CashbunnyUserPreference, error)
	GetUserPreferenceExistsByUserID(ctx context.Context, db DBTX, userID uint32) (bool, error)
	GetUserRefreshTokenExistsByValue(ctx context.Context, db DBTX, arg GetUserRefreshTokenExistsByValueParams) (bool, error)
	GetUserSystemPreference(ctx context.Context, db DBTX, userID uint32) (*UserSystemPreference, error)
	GetUserSystemPreferenceExists(ctx context.Context, db DBTX, userID uint32) (bool, error)
	GetUsernameOrEmailExists(ctx context.Context, db DBTX, arg GetUsernameOrEmailExistsParams) (bool, error)
	IncrementAccountIndices(ctx context.Context, db DBTX, arg IncrementAccountIndicesParams) error
	ListAccountsAndAmountBetweenDates(ctx context.Context, db DBTX, arg ListAccountsAndAmountBetweenDatesParams) ([]*ListAccountsAndAmountBetweenDatesRow, error)
	ListAccountsAndAmountByCategory(ctx context.Context, db DBTX, arg ListAccountsAndAmountByCategoryParams) ([]*ListAccountsAndAmountByCategoryRow, error)
	ListAccountsByIDs(ctx context.Context, db DBTX, arg ListAccountsByIDsParams) ([]*CashbunnyAccount, error)
	ListScheduledTransactionsWithAllRelations(ctx context.Context, db DBTX, userID uint32) ([]*ListScheduledTransactionsWithAllRelationsRow, error)
	ListTransactionCategories(ctx context.Context, db DBTX, userID uint32) ([]*CashbunnyTransactionCategory, error)
	ListTransactionCategoryAllocations(ctx context.Context, db DBTX, userID uint32) ([]*CashbunnyTransactionCategoryAllocation, error)
	ListTransactions(ctx context.Context, db DBTX, userID uint32) ([]*CashbunnyTransaction, error)
	ListTransactionsBetweenDates(ctx context.Context, db DBTX, arg ListTransactionsBetweenDatesParams) ([]*CashbunnyTransaction, error)
	ListUserCurrencies(ctx context.Context, db DBTX, userID uint32) ([]*CashbunnyUserCurrency, error)
	UpdateUser(ctx context.Context, db DBTX, arg UpdateUserParams) error
	UpdateUserPassword(ctx context.Context, db DBTX, arg UpdateUserPasswordParams) error
	UpdateUserSystemPreference(ctx context.Context, db DBTX, arg UpdateUserSystemPreferenceParams) error
}

var _ Querier = (*Queries)(nil)
