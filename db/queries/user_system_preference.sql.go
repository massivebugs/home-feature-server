// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_system_preference.sql

package queries

import (
	"context"
	"database/sql"
)

const createUserSystemPreference = `-- name: CreateUserSystemPreference :execresult
INSERT INTO
  user_system_preferences (user_id, ` + "`" + `language` + "`" + `)
VALUES
  (?, ?)
`

type CreateUserSystemPreferenceParams struct {
	UserID   uint32
	Language sql.NullString
}

func (q *Queries) CreateUserSystemPreference(ctx context.Context, db DBTX, arg CreateUserSystemPreferenceParams) (sql.Result, error) {
	return db.ExecContext(ctx, createUserSystemPreference, arg.UserID, arg.Language)
}

const getUserSystemPreference = `-- name: GetUserSystemPreference :one
SELECT
  id, user_id, language, created_at, updated_at, deleted_at
FROM
  user_system_preferences
WHERE
  user_id = ?
  AND deleted_at IS NULL
LIMIT
  1
`

func (q *Queries) GetUserSystemPreference(ctx context.Context, db DBTX, userID uint32) (*UserSystemPreference, error) {
	row := db.QueryRowContext(ctx, getUserSystemPreference, userID)
	var i UserSystemPreference
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Language,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getUserSystemPreferenceExists = `-- name: GetUserSystemPreferenceExists :one
SELECT
  EXISTS (
    SELECT
      id, user_id, language, created_at, updated_at, deleted_at
    FROM
      user_system_preferences
    WHERE
      user_id = ?
      AND deleted_at IS NULL
    LIMIT
      1
  )
`

func (q *Queries) GetUserSystemPreferenceExists(ctx context.Context, db DBTX, userID uint32) (bool, error) {
	row := db.QueryRowContext(ctx, getUserSystemPreferenceExists, userID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateUserSystemPreference = `-- name: UpdateUserSystemPreference :exec
UPDATE user_system_preferences
SET
  ` + "`" + `language` + "`" + ` = ?
WHERE
  user_id = ?
`

type UpdateUserSystemPreferenceParams struct {
	Language sql.NullString
	UserID   uint32
}

func (q *Queries) UpdateUserSystemPreference(ctx context.Context, db DBTX, arg UpdateUserSystemPreferenceParams) error {
	_, err := db.ExecContext(ctx, updateUserSystemPreference, arg.Language, arg.UserID)
	return err
}
