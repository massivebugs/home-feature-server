// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package user

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO
  users (name)
VALUES
  (?)
`

func (q *Queries) CreateUser(ctx context.Context, db DBTX, name string) (sql.Result, error) {
	return db.ExecContext(ctx, createUser, name)
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET
  deleted_at = CURRENT_TIMESTAMP()
WHERE
  id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, db DBTX, id uint32) error {
	_, err := db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
  id, name, created_at, updated_at, deleted_at
FROM
  users
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetUser(ctx context.Context, db DBTX, id uint32) (*User, error) {
	row := db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  name = ?
WHERE
  id = ?
`

type UpdateUserParams struct {
	Name string
	ID   uint32
}

func (q *Queries) UpdateUser(ctx context.Context, db DBTX, arg UpdateUserParams) error {
	_, err := db.ExecContext(ctx, updateUser, arg.Name, arg.ID)
	return err
}
