// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package cashbunny_category

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :execresult
INSERT INTO
  cashbunny_categories (user_id, name, description)
VALUES
  (?, ?, ?)
`

type CreateCategoryParams struct {
	UserID      uint32
	Name        string
	Description string
}

func (q *Queries) CreateCategory(ctx context.Context, db DBTX, arg CreateCategoryParams) (sql.Result, error) {
	return db.ExecContext(ctx, createCategory, arg.UserID, arg.Name, arg.Description)
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT
  id, user_id, name, description, created_at, updated_at, deleted_at
FROM
  cashbunny_categories
WHERE
  user_id = ?
  AND id = ?
LIMIT
  1
`

type GetCategoryByIDParams struct {
	UserID uint32
	ID     uint32
}

func (q *Queries) GetCategoryByID(ctx context.Context, db DBTX, arg GetCategoryByIDParams) (*CashbunnyCategory, error) {
	row := db.QueryRowContext(ctx, getCategoryByID, arg.UserID, arg.ID)
	var i CashbunnyCategory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const listCategoriesByUserID = `-- name: ListCategoriesByUserID :many
SELECT
  id, user_id, name, description, created_at, updated_at, deleted_at
FROM
  cashbunny_categories
WHERE
  user_id = ?
`

func (q *Queries) ListCategoriesByUserID(ctx context.Context, db DBTX, userID uint32) ([]*CashbunnyCategory, error) {
	rows, err := db.QueryContext(ctx, listCategoriesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*CashbunnyCategory{}
	for rows.Next() {
		var i CashbunnyCategory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
