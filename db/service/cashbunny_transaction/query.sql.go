// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package cashbunny_transaction

import (
	"context"
	"database/sql"
	"time"
)

const createTransaction = `-- name: CreateTransaction :execresult
INSERT INTO
  cashbunny_transactions (user_id, description, transacted_at)
VALUES
  (?, ?, ?)
`

type CreateTransactionParams struct {
	UserID       uint32
	Description  string
	TransactedAt time.Time
}

func (q *Queries) CreateTransaction(ctx context.Context, db DBTX, arg CreateTransactionParams) (sql.Result, error) {
	return db.ExecContext(ctx, createTransaction, arg.UserID, arg.Description, arg.TransactedAt)
}

const listTransactionsByUserID = `-- name: ListTransactionsByUserID :many
SELECT
  id, user_id, description, transacted_at, created_at, updated_at, deleted_at
FROM
  cashbunny_transactions
WHERE
  user_id = ?
`

func (q *Queries) ListTransactionsByUserID(ctx context.Context, db DBTX, userID uint32) ([]*CashbunnyTransaction, error) {
	rows, err := db.QueryContext(ctx, listTransactionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*CashbunnyTransaction{}
	for rows.Next() {
		var i CashbunnyTransaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.TransactedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
